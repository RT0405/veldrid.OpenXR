using System;

namespace Veldrid.OpenXR.Native;
public enum XrStructureType
{
    XR_TYPE_UNKNOWN = 0,
    XR_TYPE_API_LAYER_PROPERTIES = 1,
    XR_TYPE_EXTENSION_PROPERTIES = 2,
    XR_TYPE_INSTANCE_CREATE_INFO = 3,
    XR_TYPE_SYSTEM_GET_INFO = 4,
    XR_TYPE_SYSTEM_PROPERTIES = 5,
    XR_TYPE_VIEW_LOCATE_INFO = 6,
    XR_TYPE_VIEW = 7,
    XR_TYPE_SESSION_CREATE_INFO = 8,
    XR_TYPE_SWAPCHAIN_CREATE_INFO = 9,
    XR_TYPE_SESSION_BEGIN_INFO = 10,
    XR_TYPE_VIEW_STATE = 11,
    XR_TYPE_FRAME_END_INFO = 12,
    XR_TYPE_HAPTIC_VIBRATION = 13,
    XR_TYPE_EVENT_DATA_BUFFER = 16,
    XR_TYPE_EVENT_DATA_INSTANCE_LOSS_PENDING = 17,
    XR_TYPE_EVENT_DATA_SESSION_STATE_CHANGED = 18,
    XR_TYPE_ACTION_STATE_BOOLEAN = 23,
    XR_TYPE_ACTION_STATE_FLOAT = 24,
    XR_TYPE_ACTION_STATE_VECTOR2F = 25,
    XR_TYPE_ACTION_STATE_POSE = 27,
    XR_TYPE_ACTION_SET_CREATE_INFO = 28,
    XR_TYPE_ACTION_CREATE_INFO = 29,
    XR_TYPE_INSTANCE_PROPERTIES = 32,
    XR_TYPE_FRAME_WAIT_INFO = 33,
    XR_TYPE_COMPOSITION_LAYER_PROJECTION = 35,
    XR_TYPE_COMPOSITION_LAYER_QUAD = 36,
    XR_TYPE_REFERENCE_SPACE_CREATE_INFO = 37,
    XR_TYPE_ACTION_SPACE_CREATE_INFO = 38,
    XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING = 40,
    XR_TYPE_VIEW_CONFIGURATION_VIEW = 41,
    XR_TYPE_SPACE_LOCATION = 42,
    XR_TYPE_SPACE_VELOCITY = 43,
    XR_TYPE_FRAME_STATE = 44,
    XR_TYPE_VIEW_CONFIGURATION_PROPERTIES = 45,
    XR_TYPE_FRAME_BEGIN_INFO = 46,
    XR_TYPE_COMPOSITION_LAYER_PROJECTION_VIEW = 48,
    XR_TYPE_EVENT_DATA_EVENTS_LOST = 49,
    XR_TYPE_INTERACTION_PROFILE_SUGGESTED_BINDING = 51,
    XR_TYPE_EVENT_DATA_INTERACTION_PROFILE_CHANGED = 52,
    XR_TYPE_INTERACTION_PROFILE_STATE = 53,
    XR_TYPE_SWAPCHAIN_IMAGE_ACQUIRE_INFO = 55,
    XR_TYPE_SWAPCHAIN_IMAGE_WAIT_INFO = 56,
    XR_TYPE_SWAPCHAIN_IMAGE_RELEASE_INFO = 57,
    XR_TYPE_ACTION_STATE_GET_INFO = 58,
    XR_TYPE_HAPTIC_ACTION_INFO = 59,
    XR_TYPE_SESSION_ACTION_SETS_ATTACH_INFO = 60,
    XR_TYPE_ACTIONS_SYNC_INFO = 61,
    XR_TYPE_BOUND_SOURCES_FOR_ACTION_ENUMERATE_INFO = 62,
    XR_TYPE_INPUT_SOURCE_LOCALIZED_NAME_GET_INFO = 63,
    XR_TYPE_COMPOSITION_LAYER_CUBE_KHR = 1000006000,
    XR_TYPE_INSTANCE_CREATE_INFO_ANDROID_KHR = 1000008000,
    XR_TYPE_COMPOSITION_LAYER_DEPTH_INFO_KHR = 1000010000,
    XR_TYPE_VULKAN_SWAPCHAIN_FORMAT_LIST_CREATE_INFO_KHR = 1000014000,
    XR_TYPE_EVENT_DATA_PERF_SETTINGS_EXT = 1000015000,
    XR_TYPE_COMPOSITION_LAYER_CYLINDER_KHR = 1000017000,
    XR_TYPE_COMPOSITION_LAYER_EQUIRECT_KHR = 1000018000,
    XR_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000019000,
    XR_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000019001,
    XR_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000019002,
    XR_TYPE_DEBUG_UTILS_LABEL_EXT = 1000019003,
    XR_TYPE_GRAPHICS_BINDING_OPENGL_WIN32_KHR = 1000023000,
    XR_TYPE_GRAPHICS_BINDING_OPENGL_XLIB_KHR = 1000023001,
    XR_TYPE_GRAPHICS_BINDING_OPENGL_XCB_KHR = 1000023002,
    XR_TYPE_GRAPHICS_BINDING_OPENGL_WAYLAND_KHR = 1000023003,
    XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_KHR = 1000023004,
    XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_KHR = 1000023005,
    XR_TYPE_GRAPHICS_BINDING_OPENGL_ES_ANDROID_KHR = 1000024001,
    XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_ES_KHR = 1000024002,
    XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_ES_KHR = 1000024003,
    XR_TYPE_GRAPHICS_BINDING_VULKAN_KHR = 1000025000,
    XR_TYPE_SWAPCHAIN_IMAGE_VULKAN_KHR = 1000025001,
    XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN_KHR = 1000025002,
    XR_TYPE_GRAPHICS_BINDING_D3D11_KHR = 1000027000,
    XR_TYPE_SWAPCHAIN_IMAGE_D3D11_KHR = 1000027001,
    XR_TYPE_GRAPHICS_REQUIREMENTS_D3D11_KHR = 1000027002,
    XR_TYPE_GRAPHICS_BINDING_D3D12_KHR = 1000028000,
    XR_TYPE_SWAPCHAIN_IMAGE_D3D12_KHR = 1000028001,
    XR_TYPE_GRAPHICS_REQUIREMENTS_D3D12_KHR = 1000028002,
    XR_TYPE_SYSTEM_EYE_GAZE_INTERACTION_PROPERTIES_EXT = 1000030000,
    XR_TYPE_EYE_GAZE_SAMPLE_TIME_EXT = 1000030001,
    XR_TYPE_VISIBILITY_MASK_KHR = 1000031000,
    XR_TYPE_EVENT_DATA_VISIBILITY_MASK_CHANGED_KHR = 1000031001,
    XR_TYPE_SESSION_CREATE_INFO_OVERLAY_EXTX = 1000033000,
    XR_TYPE_EVENT_DATA_MAIN_SESSION_VISIBILITY_CHANGED_EXTX = 1000033003,
    XR_TYPE_COMPOSITION_LAYER_COLOR_SCALE_BIAS_KHR = 1000034000,
    XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_MSFT = 1000039000,
    XR_TYPE_SPATIAL_ANCHOR_SPACE_CREATE_INFO_MSFT = 1000039001,
    XR_TYPE_COMPOSITION_LAYER_IMAGE_LAYOUT_FB = 1000040000,
    XR_TYPE_COMPOSITION_LAYER_ALPHA_BLEND_FB = 1000041001,
    XR_TYPE_VIEW_CONFIGURATION_DEPTH_RANGE_EXT = 1000046000,
    XR_TYPE_GRAPHICS_BINDING_EGL_MNDX = 1000048004,
    XR_TYPE_SPATIAL_GRAPH_NODE_SPACE_CREATE_INFO_MSFT = 1000049000,
    XR_TYPE_SPATIAL_GRAPH_STATIC_NODE_BINDING_CREATE_INFO_MSFT = 1000049001,
    XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_GET_INFO_MSFT = 1000049002,
    XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_MSFT = 1000049003,
    XR_TYPE_SYSTEM_HAND_TRACKING_PROPERTIES_EXT = 1000051000,
    XR_TYPE_HAND_TRACKER_CREATE_INFO_EXT = 1000051001,
    XR_TYPE_HAND_JOINTS_LOCATE_INFO_EXT = 1000051002,
    XR_TYPE_HAND_JOINT_LOCATIONS_EXT = 1000051003,
    XR_TYPE_HAND_JOINT_VELOCITIES_EXT = 1000051004,
    XR_TYPE_SYSTEM_HAND_TRACKING_MESH_PROPERTIES_MSFT = 1000052000,
    XR_TYPE_HAND_MESH_SPACE_CREATE_INFO_MSFT = 1000052001,
    XR_TYPE_HAND_MESH_UPDATE_INFO_MSFT = 1000052002,
    XR_TYPE_HAND_MESH_MSFT = 1000052003,
    XR_TYPE_HAND_POSE_TYPE_INFO_MSFT = 1000052004,
    XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SESSION_BEGIN_INFO_MSFT = 1000053000,
    XR_TYPE_SECONDARY_VIEW_CONFIGURATION_STATE_MSFT = 1000053001,
    XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_STATE_MSFT = 1000053002,
    XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_END_INFO_MSFT = 1000053003,
    XR_TYPE_SECONDARY_VIEW_CONFIGURATION_LAYER_INFO_MSFT = 1000053004,
    XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SWAPCHAIN_CREATE_INFO_MSFT = 1000053005,
    XR_TYPE_CONTROLLER_MODEL_KEY_STATE_MSFT = 1000055000,
    XR_TYPE_CONTROLLER_MODEL_NODE_PROPERTIES_MSFT = 1000055001,
    XR_TYPE_CONTROLLER_MODEL_PROPERTIES_MSFT = 1000055002,
    XR_TYPE_CONTROLLER_MODEL_NODE_STATE_MSFT = 1000055003,
    XR_TYPE_CONTROLLER_MODEL_STATE_MSFT = 1000055004,
    XR_TYPE_VIEW_CONFIGURATION_VIEW_FOV_EPIC = 1000059000,
    XR_TYPE_HOLOGRAPHIC_WINDOW_ATTACHMENT_MSFT = 1000063000,
    XR_TYPE_COMPOSITION_LAYER_REPROJECTION_INFO_MSFT = 1000066000,
    XR_TYPE_COMPOSITION_LAYER_REPROJECTION_PLANE_OVERRIDE_MSFT = 1000066001,
    XR_TYPE_ANDROID_SURFACE_SWAPCHAIN_CREATE_INFO_FB = 1000070000,
    XR_TYPE_COMPOSITION_LAYER_SECURE_CONTENT_FB = 1000072000,
    XR_TYPE_BODY_TRACKER_CREATE_INFO_FB = 1000076001,
    XR_TYPE_BODY_JOINTS_LOCATE_INFO_FB = 1000076002,
    XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_FB = 1000076004,
    XR_TYPE_BODY_JOINT_LOCATIONS_FB = 1000076005,
    XR_TYPE_BODY_SKELETON_FB = 1000076006,
    XR_TYPE_INTERACTION_PROFILE_DPAD_BINDING_EXT = 1000078000,
    XR_TYPE_INTERACTION_PROFILE_ANALOG_THRESHOLD_VALVE = 1000079000,
    XR_TYPE_HAND_JOINTS_MOTION_RANGE_INFO_EXT = 1000080000,
    XR_TYPE_LOADER_INIT_INFO_ANDROID_KHR = 1000089000,
    XR_TYPE_VULKAN_INSTANCE_CREATE_INFO_KHR = 1000090000,
    XR_TYPE_VULKAN_DEVICE_CREATE_INFO_KHR = 1000090001,
    XR_TYPE_VULKAN_GRAPHICS_DEVICE_GET_INFO_KHR = 1000090003,
    XR_TYPE_COMPOSITION_LAYER_EQUIRECT2_KHR = 1000091000,
    XR_TYPE_SCENE_OBSERVER_CREATE_INFO_MSFT = 1000097000,
    XR_TYPE_SCENE_CREATE_INFO_MSFT = 1000097001,
    XR_TYPE_NEW_SCENE_COMPUTE_INFO_MSFT = 1000097002,
    XR_TYPE_VISUAL_MESH_COMPUTE_LOD_INFO_MSFT = 1000097003,
    XR_TYPE_SCENE_COMPONENTS_MSFT = 1000097004,
    XR_TYPE_SCENE_COMPONENTS_GET_INFO_MSFT = 1000097005,
    XR_TYPE_SCENE_COMPONENT_LOCATIONS_MSFT = 1000097006,
    XR_TYPE_SCENE_COMPONENTS_LOCATE_INFO_MSFT = 1000097007,
    XR_TYPE_SCENE_OBJECTS_MSFT = 1000097008,
    XR_TYPE_SCENE_COMPONENT_PARENT_FILTER_INFO_MSFT = 1000097009,
    XR_TYPE_SCENE_OBJECT_TYPES_FILTER_INFO_MSFT = 1000097010,
    XR_TYPE_SCENE_PLANES_MSFT = 1000097011,
    XR_TYPE_SCENE_PLANE_ALIGNMENT_FILTER_INFO_MSFT = 1000097012,
    XR_TYPE_SCENE_MESHES_MSFT = 1000097013,
    XR_TYPE_SCENE_MESH_BUFFERS_GET_INFO_MSFT = 1000097014,
    XR_TYPE_SCENE_MESH_BUFFERS_MSFT = 1000097015,
    XR_TYPE_SCENE_MESH_VERTEX_BUFFER_MSFT = 1000097016,
    XR_TYPE_SCENE_MESH_INDICES_UINT32_MSFT = 1000097017,
    XR_TYPE_SCENE_MESH_INDICES_UINT16_MSFT = 1000097018,
    XR_TYPE_SERIALIZED_SCENE_FRAGMENT_DATA_GET_INFO_MSFT = 1000098000,
    XR_TYPE_SCENE_DESERIALIZE_INFO_MSFT = 1000098001,
    XR_TYPE_EVENT_DATA_DISPLAY_REFRESH_RATE_CHANGED_FB = 1000101000,
    XR_TYPE_VIVE_TRACKER_PATHS_HTCX = 1000103000,
    XR_TYPE_EVENT_DATA_VIVE_TRACKER_CONNECTED_HTCX = 1000103001,
    XR_TYPE_SYSTEM_FACIAL_TRACKING_PROPERTIES_HTC = 1000104000,
    XR_TYPE_FACIAL_TRACKER_CREATE_INFO_HTC = 1000104001,
    XR_TYPE_FACIAL_EXPRESSIONS_HTC = 1000104002,
    XR_TYPE_SYSTEM_COLOR_SPACE_PROPERTIES_FB = 1000108000,
    XR_TYPE_HAND_TRACKING_MESH_FB = 1000110001,
    XR_TYPE_HAND_TRACKING_SCALE_FB = 1000110003,
    XR_TYPE_HAND_TRACKING_AIM_STATE_FB = 1000111001,
    XR_TYPE_HAND_TRACKING_CAPSULES_STATE_FB = 1000112000,
    XR_TYPE_SYSTEM_SPATIAL_ENTITY_PROPERTIES_FB = 1000113004,
    XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_FB = 1000113003,
    XR_TYPE_SPACE_COMPONENT_STATUS_SET_INFO_FB = 1000113007,
    XR_TYPE_SPACE_COMPONENT_STATUS_FB = 1000113001,
    XR_TYPE_EVENT_DATA_SPATIAL_ANCHOR_CREATE_COMPLETE_FB = 1000113005,
    XR_TYPE_EVENT_DATA_SPACE_SET_STATUS_COMPLETE_FB = 1000113006,
    XR_TYPE_FOVEATION_PROFILE_CREATE_INFO_FB = 1000114000,
    XR_TYPE_SWAPCHAIN_CREATE_INFO_FOVEATION_FB = 1000114001,
    XR_TYPE_SWAPCHAIN_STATE_FOVEATION_FB = 1000114002,
    XR_TYPE_FOVEATION_LEVEL_PROFILE_CREATE_INFO_FB = 1000115000,
    XR_TYPE_KEYBOARD_SPACE_CREATE_INFO_FB = 1000116009,
    XR_TYPE_KEYBOARD_TRACKING_QUERY_FB = 1000116004,
    XR_TYPE_SYSTEM_KEYBOARD_TRACKING_PROPERTIES_FB = 1000116002,
    XR_TYPE_TRIANGLE_MESH_CREATE_INFO_FB = 1000117001,
    XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES_FB = 1000118000,
    XR_TYPE_PASSTHROUGH_CREATE_INFO_FB = 1000118001,
    XR_TYPE_PASSTHROUGH_LAYER_CREATE_INFO_FB = 1000118002,
    XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_FB = 1000118003,
    XR_TYPE_GEOMETRY_INSTANCE_CREATE_INFO_FB = 1000118004,
    XR_TYPE_GEOMETRY_INSTANCE_TRANSFORM_FB = 1000118005,
    XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES2_FB = 1000118006,
    XR_TYPE_PASSTHROUGH_STYLE_FB = 1000118020,
    XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_RGBA_FB = 1000118021,
    XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_MONO_FB = 1000118022,
    XR_TYPE_PASSTHROUGH_BRIGHTNESS_CONTRAST_SATURATION_FB = 1000118023,
    XR_TYPE_EVENT_DATA_PASSTHROUGH_STATE_CHANGED_FB = 1000118030,
    XR_TYPE_RENDER_MODEL_PATH_INFO_FB = 1000119000,
    XR_TYPE_RENDER_MODEL_PROPERTIES_FB = 1000119001,
    XR_TYPE_RENDER_MODEL_BUFFER_FB = 1000119002,
    XR_TYPE_RENDER_MODEL_LOAD_INFO_FB = 1000119003,
    XR_TYPE_SYSTEM_RENDER_MODEL_PROPERTIES_FB = 1000119004,
    XR_TYPE_RENDER_MODEL_CAPABILITIES_REQUEST_FB = 1000119005,
    XR_TYPE_BINDING_MODIFICATIONS_KHR = 1000120000,
    XR_TYPE_VIEW_LOCATE_FOVEATED_RENDERING_VARJO = 1000121000,
    XR_TYPE_FOVEATED_VIEW_CONFIGURATION_VIEW_VARJO = 1000121001,
    XR_TYPE_SYSTEM_FOVEATED_RENDERING_PROPERTIES_VARJO = 1000121002,
    XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_VARJO = 1000122000,
    XR_TYPE_SYSTEM_MARKER_TRACKING_PROPERTIES_VARJO = 1000124000,
    XR_TYPE_EVENT_DATA_MARKER_TRACKING_UPDATE_VARJO = 1000124001,
    XR_TYPE_MARKER_SPACE_CREATE_INFO_VARJO = 1000124002,
    XR_TYPE_FRAME_END_INFO_ML = 1000135000,
    XR_TYPE_GLOBAL_DIMMER_FRAME_END_INFO_ML = 1000136000,
    XR_TYPE_COORDINATE_SPACE_CREATE_INFO_ML = 1000137000,
    XR_TYPE_SPATIAL_ANCHOR_PERSISTENCE_INFO_MSFT = 1000142000,
    XR_TYPE_SPATIAL_ANCHOR_FROM_PERSISTED_ANCHOR_CREATE_INFO_MSFT = 1000142001,
    XR_TYPE_SPACE_QUERY_INFO_FB = 1000156001,
    XR_TYPE_SPACE_QUERY_RESULTS_FB = 1000156002,
    XR_TYPE_SPACE_STORAGE_LOCATION_FILTER_INFO_FB = 1000156003,
    XR_TYPE_SPACE_UUID_FILTER_INFO_FB = 1000156054,
    XR_TYPE_SPACE_COMPONENT_FILTER_INFO_FB = 1000156052,
    XR_TYPE_EVENT_DATA_SPACE_QUERY_RESULTS_AVAILABLE_FB = 1000156103,
    XR_TYPE_EVENT_DATA_SPACE_QUERY_COMPLETE_FB = 1000156104,
    XR_TYPE_SPACE_SAVE_INFO_FB = 1000158000,
    XR_TYPE_SPACE_ERASE_INFO_FB = 1000158001,
    XR_TYPE_EVENT_DATA_SPACE_SAVE_COMPLETE_FB = 1000158106,
    XR_TYPE_EVENT_DATA_SPACE_ERASE_COMPLETE_FB = 1000158107,
    XR_TYPE_SWAPCHAIN_IMAGE_FOVEATION_VULKAN_FB = 1000160000,
    XR_TYPE_SWAPCHAIN_STATE_ANDROID_SURFACE_DIMENSIONS_FB = 1000161000,
    XR_TYPE_SWAPCHAIN_STATE_SAMPLER_OPENGL_ES_FB = 1000162000,
    XR_TYPE_SWAPCHAIN_STATE_SAMPLER_VULKAN_FB = 1000163000,
    XR_TYPE_SPACE_SHARE_INFO_FB = 1000169001,
    XR_TYPE_EVENT_DATA_SPACE_SHARE_COMPLETE_FB = 1000169002,
    XR_TYPE_COMPOSITION_LAYER_SPACE_WARP_INFO_FB = 1000171000,
    XR_TYPE_SYSTEM_SPACE_WARP_PROPERTIES_FB = 1000171001,
    XR_TYPE_HAPTIC_AMPLITUDE_ENVELOPE_VIBRATION_FB = 1000173001,
    XR_TYPE_SEMANTIC_LABELS_FB = 1000175000,
    XR_TYPE_ROOM_LAYOUT_FB = 1000175001,
    XR_TYPE_BOUNDARY_2D_FB = 1000175002,
    XR_TYPE_SEMANTIC_LABELS_SUPPORT_INFO_FB = 1000175010,
    XR_TYPE_DIGITAL_LENS_CONTROL_ALMALENCE = 1000196000,
    XR_TYPE_EVENT_DATA_SCENE_CAPTURE_COMPLETE_FB = 1000198001,
    XR_TYPE_SCENE_CAPTURE_REQUEST_INFO_FB = 1000198050,
    XR_TYPE_SPACE_CONTAINER_FB = 1000199000,
    XR_TYPE_FOVEATION_EYE_TRACKED_PROFILE_CREATE_INFO_META = 1000200000,
    XR_TYPE_FOVEATION_EYE_TRACKED_STATE_META = 1000200001,
    XR_TYPE_SYSTEM_FOVEATION_EYE_TRACKED_PROPERTIES_META = 1000200002,
    XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES_FB = 1000201004,
    XR_TYPE_FACE_TRACKER_CREATE_INFO_FB = 1000201005,
    XR_TYPE_FACE_EXPRESSION_INFO_FB = 1000201002,
    XR_TYPE_FACE_EXPRESSION_WEIGHTS_FB = 1000201006,
    XR_TYPE_EYE_TRACKER_CREATE_INFO_FB = 1000202001,
    XR_TYPE_EYE_GAZES_INFO_FB = 1000202002,
    XR_TYPE_EYE_GAZES_FB = 1000202003,
    XR_TYPE_SYSTEM_EYE_TRACKING_PROPERTIES_FB = 1000202004,
    XR_TYPE_PASSTHROUGH_KEYBOARD_HANDS_INTENSITY_FB = 1000203002,
    XR_TYPE_COMPOSITION_LAYER_SETTINGS_FB = 1000204000,
    XR_TYPE_HAPTIC_PCM_VIBRATION_FB = 1000209001,
    XR_TYPE_DEVICE_PCM_SAMPLE_RATE_STATE_FB = 1000209002,
    XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_FB = 1000212000,
    XR_TYPE_LOCAL_DIMMING_FRAME_END_INFO_META = 1000216000,
    XR_TYPE_PASSTHROUGH_PREFERENCES_META = 1000217000,
    XR_TYPE_SYSTEM_VIRTUAL_KEYBOARD_PROPERTIES_META = 1000219001,
    XR_TYPE_VIRTUAL_KEYBOARD_CREATE_INFO_META = 1000219002,
    XR_TYPE_VIRTUAL_KEYBOARD_SPACE_CREATE_INFO_META = 1000219003,
    XR_TYPE_VIRTUAL_KEYBOARD_LOCATION_INFO_META = 1000219004,
    XR_TYPE_VIRTUAL_KEYBOARD_MODEL_VISIBILITY_SET_INFO_META = 1000219005,
    XR_TYPE_VIRTUAL_KEYBOARD_ANIMATION_STATE_META = 1000219006,
    XR_TYPE_VIRTUAL_KEYBOARD_MODEL_ANIMATION_STATES_META = 1000219007,
    XR_TYPE_VIRTUAL_KEYBOARD_TEXTURE_DATA_META = 1000219009,
    XR_TYPE_VIRTUAL_KEYBOARD_INPUT_INFO_META = 1000219010,
    XR_TYPE_VIRTUAL_KEYBOARD_TEXT_CONTEXT_CHANGE_INFO_META = 1000219011,
    XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_COMMIT_TEXT_META = 1000219014,
    XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_BACKSPACE_META = 1000219015,
    XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_ENTER_META = 1000219016,
    XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_SHOWN_META = 1000219017,
    XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_HIDDEN_META = 1000219018,
    XR_TYPE_EXTERNAL_CAMERA_OCULUS = 1000226000,
    XR_TYPE_VULKAN_SWAPCHAIN_CREATE_INFO_META = 1000227000,
    XR_TYPE_PERFORMANCE_METRICS_STATE_META = 1000232001,
    XR_TYPE_PERFORMANCE_METRICS_COUNTER_META = 1000232002,
    XR_TYPE_SPACE_LIST_SAVE_INFO_FB = 1000238000,
    XR_TYPE_EVENT_DATA_SPACE_LIST_SAVE_COMPLETE_FB = 1000238001,
    XR_TYPE_SPACE_USER_CREATE_INFO_FB = 1000241001,
    XR_TYPE_SYSTEM_HEADSET_ID_PROPERTIES_META = 1000245000,
    XR_TYPE_SYSTEM_PASSTHROUGH_COLOR_LUT_PROPERTIES_META = 1000266000,
    XR_TYPE_PASSTHROUGH_COLOR_LUT_CREATE_INFO_META = 1000266001,
    XR_TYPE_PASSTHROUGH_COLOR_LUT_UPDATE_INFO_META = 1000266002,
    XR_TYPE_PASSTHROUGH_COLOR_MAP_LUT_META = 1000266100,
    XR_TYPE_PASSTHROUGH_COLOR_MAP_INTERPOLATED_LUT_META = 1000266101,
    XR_TYPE_PASSTHROUGH_CREATE_INFO_HTC = 1000317001,
    XR_TYPE_PASSTHROUGH_COLOR_HTC = 1000317002,
    XR_TYPE_PASSTHROUGH_MESH_TRANSFORM_INFO_HTC = 1000317003,
    XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_HTC = 1000317004,
    XR_TYPE_FOVEATION_APPLY_INFO_HTC = 1000318000,
    XR_TYPE_FOVEATION_DYNAMIC_MODE_INFO_HTC = 1000318001,
    XR_TYPE_FOVEATION_CUSTOM_MODE_INFO_HTC = 1000318002,
    XR_TYPE_ACTIVE_ACTION_SET_PRIORITIES_EXT = 1000373000,
    XR_TYPE_SYSTEM_FORCE_FEEDBACK_CURL_PROPERTIES_MNDX = 1000375000,
    XR_TYPE_FORCE_FEEDBACK_CURL_APPLY_LOCATIONS_MNDX = 1000375001,
    XR_TYPE_HAND_TRACKING_DATA_SOURCE_INFO_EXT = 1000428000,
    XR_TYPE_HAND_TRACKING_DATA_SOURCE_STATE_EXT = 1000428001,
    XR_TYPE_PLANE_DETECTOR_CREATE_INFO_EXT = 1000429001,
    XR_TYPE_PLANE_DETECTOR_BEGIN_INFO_EXT = 1000429002,
    XR_TYPE_PLANE_DETECTOR_GET_INFO_EXT = 1000429003,
    XR_TYPE_PLANE_DETECTOR_LOCATIONS_EXT = 1000429004,
    XR_TYPE_PLANE_DETECTOR_LOCATION_EXT = 1000429005,
    XR_TYPE_PLANE_DETECTOR_POLYGON_BUFFER_EXT = 1000429006,
    XR_TYPE_SYSTEM_PLANE_DETECTION_PROPERTIES_EXT = 1000429007,
}
public enum XrResult
{
    /// <summary> Function successfully completed. </summary>
    XR_SUCCESS = 0,
    /// <summary> The specified timeout time occurred before the operation could complete. </summary>
    XR_TIMEOUT_EXPIRED = 1,
    /// <summary> The session will be lost soon. </summary>
    XR_SESSION_LOSS_PENDING = 3,
    /// <summary> No event was available. </summary>
    XR_EVENT_UNAVAILABLE = 4,
    /// <summary> The space's bounds are not known at the moment. </summary>
    XR_SPACE_BOUNDS_UNAVAILABLE = 7,
    /// <summary> The session is not in the focused state. </summary>
    XR_SESSION_NOT_FOCUSED = 8,
    /// <summary> A frame has been discarded from composition. </summary>
    XR_FRAME_DISCARDED = 9,
    /// <summary> The function usage was invalid in some way. </summary>
    XR_ERROR_VALIDATION_FAILURE = -1,
    /// <summary> The runtime failed to handle the function in an unexpected way that is not covered by another error result.  </summary>
    XR_ERROR_RUNTIME_FAILURE = -2,
    /// <summary> A memory allocation has failed. </summary>
    XR_ERROR_OUT_OF_MEMORY = -3,
    /// <summary> The runtime does not support the requested API version. </summary>
    XR_ERROR_API_VERSION_UNSUPPORTED = -4,
    /// <summary> Initialization of object could not be completed. </summary>
    XR_ERROR_INITIALIZATION_FAILED = -6,
    /// <summary> The requested function was not found or is otherwise unsupported. </summary>
    XR_ERROR_FUNCTION_UNSUPPORTED = -7,
    /// <summary> The requested feature is not supported. </summary>
    XR_ERROR_FEATURE_UNSUPPORTED = -8,
    /// <summary> A requested extension is not supported. </summary>
    XR_ERROR_EXTENSION_NOT_PRESENT = -9,
    /// <summary> The runtime supports no more of the requested resource. </summary>
    XR_ERROR_LIMIT_REACHED = -10,
    /// <summary> The supplied size was smaller than required. </summary>
    XR_ERROR_SIZE_INSUFFICIENT = -11,
    /// <summary> A supplied object handle was invalid. </summary>
    XR_ERROR_HANDLE_INVALID = -12,
    /// <summary> The slink:XrInstance was lost or could not be found. It will need to be destroyed and optionally recreated. </summary>
    XR_ERROR_INSTANCE_LOST = -13,
    /// <summary> The session <<session_running, is already running>>. </summary>
    XR_ERROR_SESSION_RUNNING = -14,
    /// <summary> The session <<session_not_running, is not yet running>>. </summary>
    XR_ERROR_SESSION_NOT_RUNNING = -16,
    /// <summary> The slink:XrSession was lost. It will need to be destroyed and optionally recreated. </summary>
    XR_ERROR_SESSION_LOST = -17,
    /// <summary> The provided basetype:XrSystemId was invalid. </summary>
    XR_ERROR_SYSTEM_INVALID = -18,
    /// <summary> The provided basetype:XrPath was not valid. </summary>
    XR_ERROR_PATH_INVALID = -19,
    /// <summary> The maximum number of supported semantic paths has been reached. </summary>
    XR_ERROR_PATH_COUNT_EXCEEDED = -20,
    /// <summary> The semantic path character format is invalid. </summary>
    XR_ERROR_PATH_FORMAT_INVALID = -21,
    /// <summary> The semantic path is unsupported. </summary>
    XR_ERROR_PATH_UNSUPPORTED = -22,
    /// <summary> The layer was NULL or otherwise invalid. </summary>
    XR_ERROR_LAYER_INVALID = -23,
    /// <summary> The number of specified layers is greater than the supported number. </summary>
    XR_ERROR_LAYER_LIMIT_EXCEEDED = -24,
    /// <summary> The image rect was negatively sized or otherwise invalid. </summary>
    XR_ERROR_SWAPCHAIN_RECT_INVALID = -25,
    /// <summary> The image format is not supported by the runtime or platform. </summary>
    XR_ERROR_SWAPCHAIN_FORMAT_UNSUPPORTED = -26,
    /// <summary> The API used to retrieve an action's state does not match the action's type. </summary>
    XR_ERROR_ACTION_TYPE_MISMATCH = -27,
    /// <summary> The session is not in the ready state. </summary>
    XR_ERROR_SESSION_NOT_READY = -28,
    /// <summary> The session is not in the stopping state. </summary>
    XR_ERROR_SESSION_NOT_STOPPING = -29,
    /// <summary> The provided basetype:XrTime was zero, negative, or out of range. </summary>
    XR_ERROR_TIME_INVALID = -30,
    /// <summary> The specified reference space is not supported by the runtime or system. </summary>
    XR_ERROR_REFERENCE_SPACE_UNSUPPORTED = -31,
    /// <summary> The file could not be accessed. </summary>
    XR_ERROR_FILE_ACCESS_ERROR = -32,
    /// <summary> The file's contents were invalid. </summary>
    XR_ERROR_FILE_CONTENTS_INVALID = -33,
    /// <summary> The specified form factor is not supported by the current runtime or platform. </summary>
    XR_ERROR_FORM_FACTOR_UNSUPPORTED = -34,
    /// <summary> The specified form factor is supported, but the device is currently not available, e.g. not plugged in or powered off. </summary>
    XR_ERROR_FORM_FACTOR_UNAVAILABLE = -35,
    /// <summary> A requested API layer is not present or could not be loaded. </summary>
    XR_ERROR_API_LAYER_NOT_PRESENT = -36,
    /// <summary> The call was made without having made a previously required call. </summary>
    XR_ERROR_CALL_ORDER_INVALID = -37,
    /// <summary> The given graphics device is not in a valid state. The graphics device could be lost or initialized without meeting graphics requirements. </summary>
    XR_ERROR_GRAPHICS_DEVICE_INVALID = -38,
    /// <summary> The supplied pose was invalid with respect to the requirements. </summary>
    XR_ERROR_POSE_INVALID = -39,
    /// <summary> The supplied index was outside the range of valid indices. </summary>
    XR_ERROR_INDEX_OUT_OF_RANGE = -40,
    /// <summary> The specified view configuration type is not supported by the runtime or platform. </summary>
    XR_ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED = -41,
    /// <summary> The specified environment blend mode is not supported by the runtime or platform. </summary>
    XR_ERROR_ENVIRONMENT_BLEND_MODE_UNSUPPORTED = -42,
    /// <summary> The name provided was a duplicate of an already-existing resource. </summary>
    XR_ERROR_NAME_DUPLICATED = -44,
    /// <summary> The name provided was invalid. </summary>
    XR_ERROR_NAME_INVALID = -45,
    /// <summary> A referenced action set is not attached to the session. </summary>
    XR_ERROR_ACTIONSET_NOT_ATTACHED = -46,
    /// <summary> The session already has attached action sets. </summary>
    XR_ERROR_ACTIONSETS_ALREADY_ATTACHED = -47,
    /// <summary> The localized name provided was a duplicate of an already-existing resource. </summary>
    XR_ERROR_LOCALIZED_NAME_DUPLICATED = -48,
    /// <summary> The localized name provided was invalid. </summary>
    XR_ERROR_LOCALIZED_NAME_INVALID = -49,
    /// <summary> The fname:xrGetGraphicsRequirements* call was not made before calling fname:xrCreateSession. </summary>
    XR_ERROR_GRAPHICS_REQUIREMENTS_CALL_MISSING = -50,
    /// <summary> The loader was unable to find or load a runtime. </summary>
    XR_ERROR_RUNTIME_UNAVAILABLE = -51,
    XR_ERROR_ANDROID_THREAD_SETTINGS_ID_INVALID_KHR = -1000003000,
    XR_ERROR_ANDROID_THREAD_SETTINGS_FAILURE_KHR = -1000003001,
    XR_ERROR_CREATE_SPATIAL_ANCHOR_FAILED_MSFT = -1000039001,
    XR_ERROR_SECONDARY_VIEW_CONFIGURATION_TYPE_NOT_ENABLED_MSFT = -1000053000,
    XR_ERROR_CONTROLLER_MODEL_KEY_INVALID_MSFT = -1000055000,
    XR_ERROR_REPROJECTION_MODE_UNSUPPORTED_MSFT = -1000066000,
    XR_ERROR_COMPUTE_NEW_SCENE_NOT_COMPLETED_MSFT = -1000097000,
    XR_ERROR_SCENE_COMPONENT_ID_INVALID_MSFT = -1000097001,
    XR_ERROR_SCENE_COMPONENT_TYPE_MISMATCH_MSFT = -1000097002,
    XR_ERROR_SCENE_MESH_BUFFER_ID_INVALID_MSFT = -1000097003,
    XR_ERROR_SCENE_COMPUTE_FEATURE_INCOMPATIBLE_MSFT = -1000097004,
    XR_ERROR_SCENE_COMPUTE_CONSISTENCY_MISMATCH_MSFT = -1000097005,
    XR_ERROR_DISPLAY_REFRESH_RATE_UNSUPPORTED_FB = -1000101000,
    XR_ERROR_COLOR_SPACE_UNSUPPORTED_FB = -1000108000,
    XR_ERROR_SPACE_COMPONENT_NOT_SUPPORTED_FB = -1000113000,
    XR_ERROR_SPACE_COMPONENT_NOT_ENABLED_FB = -1000113001,
    XR_ERROR_SPACE_COMPONENT_STATUS_PENDING_FB = -1000113002,
    XR_ERROR_SPACE_COMPONENT_STATUS_ALREADY_SET_FB = -1000113003,
    XR_ERROR_UNEXPECTED_STATE_PASSTHROUGH_FB = -1000118000,
    XR_ERROR_FEATURE_ALREADY_CREATED_PASSTHROUGH_FB = -1000118001,
    XR_ERROR_FEATURE_REQUIRED_PASSTHROUGH_FB = -1000118002,
    XR_ERROR_NOT_PERMITTED_PASSTHROUGH_FB = -1000118003,
    XR_ERROR_INSUFFICIENT_RESOURCES_PASSTHROUGH_FB = -1000118004,
    XR_ERROR_UNKNOWN_PASSTHROUGH_FB = -1000118050,
    XR_ERROR_RENDER_MODEL_KEY_INVALID_FB = -1000119000,
    XR_RENDER_MODEL_UNAVAILABLE_FB = 1000119020,
    XR_ERROR_MARKER_NOT_TRACKED_VARJO = -1000124000,
    XR_ERROR_MARKER_ID_INVALID_VARJO = -1000124001,
    XR_ERROR_SPATIAL_ANCHOR_NAME_NOT_FOUND_MSFT = -1000142001,
    XR_ERROR_SPATIAL_ANCHOR_NAME_INVALID_MSFT = -1000142002,
    XR_ERROR_SPACE_MAPPING_INSUFFICIENT_FB = -1000169000,
    XR_ERROR_SPACE_LOCALIZATION_FAILED_FB = -1000169001,
    XR_ERROR_SPACE_NETWORK_TIMEOUT_FB = -1000169002,
    XR_ERROR_SPACE_NETWORK_REQUEST_FAILED_FB = -1000169003,
    XR_ERROR_SPACE_CLOUD_STORAGE_DISABLED_FB = -1000169004,
    XR_ERROR_PASSTHROUGH_COLOR_LUT_BUFFER_SIZE_MISMATCH_META = -1000266000,
    XR_ERROR_HINT_ALREADY_SET_QCOM = -1000306000,
    XR_ERROR_SPACE_NOT_LOCATABLE_EXT = -1000429000,
    XR_ERROR_PLANE_DETECTION_PERMISSION_DENIED_EXT = -1000429001,
}
public enum XrObjectType
{
    XR_OBJECT_TYPE_UNKNOWN = 0,
    /// <summary> XrInstance </summary>
    XR_OBJECT_TYPE_INSTANCE = 1,
    /// <summary> XrSession </summary>
    XR_OBJECT_TYPE_SESSION = 2,
    /// <summary> XrSwapchain </summary>
    XR_OBJECT_TYPE_SWAPCHAIN = 3,
    /// <summary> XrSpace </summary>
    XR_OBJECT_TYPE_SPACE = 4,
    /// <summary> XrActionSet </summary>
    XR_OBJECT_TYPE_ACTION_SET = 5,
    /// <summary> XrAction </summary>
    XR_OBJECT_TYPE_ACTION = 6,
    XR_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000019000,
    XR_OBJECT_TYPE_SPATIAL_ANCHOR_MSFT = 1000039000,
    XR_OBJECT_TYPE_SPATIAL_GRAPH_NODE_BINDING_MSFT = 1000049000,
    XR_OBJECT_TYPE_HAND_TRACKER_EXT = 1000051000,
    XR_OBJECT_TYPE_BODY_TRACKER_FB = 1000076000,
    XR_OBJECT_TYPE_SCENE_OBSERVER_MSFT = 1000097000,
    XR_OBJECT_TYPE_SCENE_MSFT = 1000097001,
    XR_OBJECT_TYPE_FACIAL_TRACKER_HTC = 1000104000,
    XR_OBJECT_TYPE_FOVEATION_PROFILE_FB = 1000114000,
    XR_OBJECT_TYPE_TRIANGLE_MESH_FB = 1000117000,
    XR_OBJECT_TYPE_PASSTHROUGH_FB = 1000118000,
    XR_OBJECT_TYPE_PASSTHROUGH_LAYER_FB = 1000118002,
    XR_OBJECT_TYPE_GEOMETRY_INSTANCE_FB = 1000118004,
    XR_OBJECT_TYPE_SPATIAL_ANCHOR_STORE_CONNECTION_MSFT = 1000142000,
    XR_OBJECT_TYPE_FACE_TRACKER_FB = 1000201000,
    XR_OBJECT_TYPE_EYE_TRACKER_FB = 1000202000,
    XR_OBJECT_TYPE_VIRTUAL_KEYBOARD_META = 1000219000,
    XR_OBJECT_TYPE_SPACE_USER_FB = 1000241000,
    XR_OBJECT_TYPE_PASSTHROUGH_COLOR_LUT_META = 1000266000,
    XR_OBJECT_TYPE_PASSTHROUGH_HTC = 1000317000,
    XR_OBJECT_TYPE_PLANE_DETECTOR_EXT = 1000429000,
}
public enum XrAndroidThreadTypeKHR
{
    None = 0,
    XR_ANDROID_THREAD_TYPE_APPLICATION_MAIN_KHR = 1,
    XR_ANDROID_THREAD_TYPE_APPLICATION_WORKER_KHR = 2,
    XR_ANDROID_THREAD_TYPE_RENDERER_MAIN_KHR = 3,
    XR_ANDROID_THREAD_TYPE_RENDERER_WORKER_KHR = 4,
}
public enum XrEyeVisibility
{
    /// <summary> Display in both eyes. </summary>
    XR_EYE_VISIBILITY_BOTH = 0,
    /// <summary> Display in the left eye only. </summary>
    XR_EYE_VISIBILITY_LEFT = 1,
    /// <summary> Display in the right eye only. </summary>
    XR_EYE_VISIBILITY_RIGHT = 2,
}
public enum XrActionType
{
    None = 0,
    XR_ACTION_TYPE_BOOLEAN_INPUT = 1,
    XR_ACTION_TYPE_FLOAT_INPUT = 2,
    XR_ACTION_TYPE_VECTOR2F_INPUT = 3,
    XR_ACTION_TYPE_POSE_INPUT = 4,
    XR_ACTION_TYPE_VIBRATION_OUTPUT = 100,
}
public enum XrReferenceSpaceType
{
    None = 0,
    XR_REFERENCE_SPACE_TYPE_VIEW = 1,
    XR_REFERENCE_SPACE_TYPE_LOCAL = 2,
    XR_REFERENCE_SPACE_TYPE_STAGE = 3,
    XR_REFERENCE_SPACE_TYPE_UNBOUNDED_MSFT = 1000038000,
    XR_REFERENCE_SPACE_TYPE_COMBINED_EYE_VARJO = 1000121000,
    XR_REFERENCE_SPACE_TYPE_LOCAL_FLOOR_EXT = 1000426000,
}
public enum XrFormFactor
{
    None = 0,
    XR_FORM_FACTOR_HEAD_MOUNTED_DISPLAY = 1,
    XR_FORM_FACTOR_HANDHELD_DISPLAY = 2,
}
public enum XrViewConfigurationType
{
    None = 0,
    XR_VIEW_CONFIGURATION_TYPE_PRIMARY_MONO = 1,
    XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO = 2,
    XR_VIEW_CONFIGURATION_TYPE_PRIMARY_QUAD_VARJO = 1000037000,
    XR_VIEW_CONFIGURATION_TYPE_SECONDARY_MONO_FIRST_PERSON_OBSERVER_MSFT = 1000054000,
}
public enum XrEnvironmentBlendMode
{
    None = 0,
    XR_ENVIRONMENT_BLEND_MODE_OPAQUE = 1,
    XR_ENVIRONMENT_BLEND_MODE_ADDITIVE = 2,
    XR_ENVIRONMENT_BLEND_MODE_ALPHA_BLEND = 3,
}
public enum XrSessionState
{
    XR_SESSION_STATE_UNKNOWN = 0,
    XR_SESSION_STATE_IDLE = 1,
    XR_SESSION_STATE_READY = 2,
    XR_SESSION_STATE_SYNCHRONIZED = 3,
    XR_SESSION_STATE_VISIBLE = 4,
    XR_SESSION_STATE_FOCUSED = 5,
    XR_SESSION_STATE_STOPPING = 6,
    XR_SESSION_STATE_LOSS_PENDING = 7,
    XR_SESSION_STATE_EXITING = 8,
}
public enum XrPerfSettingsLevelEXT
{
    /// <summary> Performance settings hint used by the application to indicate that it enters a non-XR section (head-locked / static screen), during which power savings are to be prioritized </summary>
    XR_PERF_SETTINGS_LEVEL_POWER_SAVINGS_EXT = 0,
    /// <summary> Performance settings hint used by the application to indicate that it enters a low and stable complexity section, during which reducing power is more important than occasional late rendering frames </summary>
    XR_PERF_SETTINGS_LEVEL_SUSTAINED_LOW_EXT = 25,
    /// <summary> Performance settings hint used by the application to indicate that it enters a high or dynamic complexity section, during which the XR Runtime strives for consistent XR compositing and frame rendering within a thermally sustainable range </summary>
    XR_PERF_SETTINGS_LEVEL_SUSTAINED_HIGH_EXT = 50,
    /// <summary> Performance settings hint used by the application to indicate that the application enters a section with very high complexity, during which the XR Runtime is allowed to step up beyond the thermally sustainable range </summary>
    XR_PERF_SETTINGS_LEVEL_BOOST_EXT = 75,
}
public enum XrPerfSettingsDomainEXT
{
    None = 0,
    /// <summary> Indicates that the performance settings or notification applies to CPU domain </summary>
    XR_PERF_SETTINGS_DOMAIN_CPU_EXT = 1,
    /// <summary> Indicates that the performance settings or notification applies to GPU domain </summary>
    XR_PERF_SETTINGS_DOMAIN_GPU_EXT = 2,
}
public enum XrPerfSettingsSubDomainEXT
{
    None = 0,
    /// <summary> Indicates that the performance notification originates from the COMPOSITING sub-domain </summary>
    XR_PERF_SETTINGS_SUB_DOMAIN_COMPOSITING_EXT = 1,
    /// <summary> Indicates that the performance notification originates from the RENDERING sub-domain </summary>
    XR_PERF_SETTINGS_SUB_DOMAIN_RENDERING_EXT = 2,
    /// <summary> Indicates that the performance notification originates from the THERMAL sub-domain </summary>
    XR_PERF_SETTINGS_SUB_DOMAIN_THERMAL_EXT = 3,
}
public enum XrPerfSettingsNotificationLevelEXT
{
    /// <summary> Notifies that the sub-domain has reached a level where no further actions other than currently applied are necessary </summary>
    XR_PERF_SETTINGS_NOTIF_LEVEL_NORMAL_EXT = 0,
    /// <summary> Notifies that the sub-domain has reached an early warning level where the application should start proactive mitigation actions with the goal to return to the ename:XR_PERF_NOTIF_LEVEL_NORMAL level </summary>
    XR_PERF_SETTINGS_NOTIF_LEVEL_WARNING_EXT = 25,
    /// <summary> Notifies that the sub-domain has reached a critical level with significant performance degradation. The application should take drastic mitigation action </summary>
    XR_PERF_SETTINGS_NOTIF_LEVEL_IMPAIRED_EXT = 75,
}
public enum XrVisibilityMaskTypeKHR
{
    None = 0,
    /// <summary> exclusive mesh; indicates that which the viewer cannot see. </summary>
    XR_VISIBILITY_MASK_TYPE_HIDDEN_TRIANGLE_MESH_KHR = 1,
    /// <summary> inclusive mesh; indicates strictly that which the viewer can see. </summary>
    XR_VISIBILITY_MASK_TYPE_VISIBLE_TRIANGLE_MESH_KHR = 2,
    /// <summary> line loop; traces the outline of the area the viewer can see. </summary>
    XR_VISIBILITY_MASK_TYPE_LINE_LOOP_KHR = 3,
}
public enum XrHandEXT
{
    None = 0,
    XR_HAND_LEFT_EXT = 1,
    XR_HAND_RIGHT_EXT = 2,
}
public enum XrHandJointEXT
{
    XR_HAND_JOINT_PALM_EXT = 0,
    XR_HAND_JOINT_WRIST_EXT = 1,
    XR_HAND_JOINT_THUMB_METACARPAL_EXT = 2,
    XR_HAND_JOINT_THUMB_PROXIMAL_EXT = 3,
    XR_HAND_JOINT_THUMB_DISTAL_EXT = 4,
    XR_HAND_JOINT_THUMB_TIP_EXT = 5,
    XR_HAND_JOINT_INDEX_METACARPAL_EXT = 6,
    XR_HAND_JOINT_INDEX_PROXIMAL_EXT = 7,
    XR_HAND_JOINT_INDEX_INTERMEDIATE_EXT = 8,
    XR_HAND_JOINT_INDEX_DISTAL_EXT = 9,
    XR_HAND_JOINT_INDEX_TIP_EXT = 10,
    XR_HAND_JOINT_MIDDLE_METACARPAL_EXT = 11,
    XR_HAND_JOINT_MIDDLE_PROXIMAL_EXT = 12,
    XR_HAND_JOINT_MIDDLE_INTERMEDIATE_EXT = 13,
    XR_HAND_JOINT_MIDDLE_DISTAL_EXT = 14,
    XR_HAND_JOINT_MIDDLE_TIP_EXT = 15,
    XR_HAND_JOINT_RING_METACARPAL_EXT = 16,
    XR_HAND_JOINT_RING_PROXIMAL_EXT = 17,
    XR_HAND_JOINT_RING_INTERMEDIATE_EXT = 18,
    XR_HAND_JOINT_RING_DISTAL_EXT = 19,
    XR_HAND_JOINT_RING_TIP_EXT = 20,
    XR_HAND_JOINT_LITTLE_METACARPAL_EXT = 21,
    XR_HAND_JOINT_LITTLE_PROXIMAL_EXT = 22,
    XR_HAND_JOINT_LITTLE_INTERMEDIATE_EXT = 23,
    XR_HAND_JOINT_LITTLE_DISTAL_EXT = 24,
    XR_HAND_JOINT_LITTLE_TIP_EXT = 25,
}
public enum XrHandJointSetEXT
{
    XR_HAND_JOINT_SET_DEFAULT_EXT = 0,
    XR_HAND_JOINT_SET_HAND_WITH_FOREARM_ULTRALEAP = 1000149000,
}
public enum XrHandJointsMotionRangeEXT
{
    None = 0,
    XR_HAND_JOINTS_MOTION_RANGE_UNOBSTRUCTED_EXT = 1,
    XR_HAND_JOINTS_MOTION_RANGE_CONFORMING_TO_CONTROLLER_EXT = 2,
}
public enum XrHandTrackingDataSourceEXT
{
    None = 0,
    /// <summary> This data source value indicates individual fingers and joints are tracked from unobstructed data source such as optical hand tracking, data gloves, or motion capture devices. </summary>
    XR_HAND_TRACKING_DATA_SOURCE_UNOBSTRUCTED_EXT = 1,
    /// <summary> This data source value indicates hand joints are inferred based on motion controller state. </summary>
    XR_HAND_TRACKING_DATA_SOURCE_CONTROLLER_EXT = 2,
}
public enum XrHandPoseTypeMSFT
{
    XR_HAND_POSE_TYPE_TRACKED_MSFT = 0,
    XR_HAND_POSE_TYPE_REFERENCE_OPEN_PALM_MSFT = 1,
}
public enum XrFaceExpressionFB
{
    XR_FACE_EXPRESSION_BROW_LOWERER_L_FB = 0,
    XR_FACE_EXPRESSION_BROW_LOWERER_R_FB = 1,
    XR_FACE_EXPRESSION_CHEEK_PUFF_L_FB = 2,
    XR_FACE_EXPRESSION_CHEEK_PUFF_R_FB = 3,
    XR_FACE_EXPRESSION_CHEEK_RAISER_L_FB = 4,
    XR_FACE_EXPRESSION_CHEEK_RAISER_R_FB = 5,
    XR_FACE_EXPRESSION_CHEEK_SUCK_L_FB = 6,
    XR_FACE_EXPRESSION_CHEEK_SUCK_R_FB = 7,
    XR_FACE_EXPRESSION_CHIN_RAISER_B_FB = 8,
    XR_FACE_EXPRESSION_CHIN_RAISER_T_FB = 9,
    XR_FACE_EXPRESSION_DIMPLER_L_FB = 10,
    XR_FACE_EXPRESSION_DIMPLER_R_FB = 11,
    XR_FACE_EXPRESSION_EYES_CLOSED_L_FB = 12,
    XR_FACE_EXPRESSION_EYES_CLOSED_R_FB = 13,
    XR_FACE_EXPRESSION_EYES_LOOK_DOWN_L_FB = 14,
    XR_FACE_EXPRESSION_EYES_LOOK_DOWN_R_FB = 15,
    XR_FACE_EXPRESSION_EYES_LOOK_LEFT_L_FB = 16,
    XR_FACE_EXPRESSION_EYES_LOOK_LEFT_R_FB = 17,
    XR_FACE_EXPRESSION_EYES_LOOK_RIGHT_L_FB = 18,
    XR_FACE_EXPRESSION_EYES_LOOK_RIGHT_R_FB = 19,
    XR_FACE_EXPRESSION_EYES_LOOK_UP_L_FB = 20,
    XR_FACE_EXPRESSION_EYES_LOOK_UP_R_FB = 21,
    XR_FACE_EXPRESSION_INNER_BROW_RAISER_L_FB = 22,
    XR_FACE_EXPRESSION_INNER_BROW_RAISER_R_FB = 23,
    XR_FACE_EXPRESSION_JAW_DROP_FB = 24,
    XR_FACE_EXPRESSION_JAW_SIDEWAYS_LEFT_FB = 25,
    XR_FACE_EXPRESSION_JAW_SIDEWAYS_RIGHT_FB = 26,
    XR_FACE_EXPRESSION_JAW_THRUST_FB = 27,
    XR_FACE_EXPRESSION_LID_TIGHTENER_L_FB = 28,
    XR_FACE_EXPRESSION_LID_TIGHTENER_R_FB = 29,
    XR_FACE_EXPRESSION_LIP_CORNER_DEPRESSOR_L_FB = 30,
    XR_FACE_EXPRESSION_LIP_CORNER_DEPRESSOR_R_FB = 31,
    XR_FACE_EXPRESSION_LIP_CORNER_PULLER_L_FB = 32,
    XR_FACE_EXPRESSION_LIP_CORNER_PULLER_R_FB = 33,
    XR_FACE_EXPRESSION_LIP_FUNNELER_LB_FB = 34,
    XR_FACE_EXPRESSION_LIP_FUNNELER_LT_FB = 35,
    XR_FACE_EXPRESSION_LIP_FUNNELER_RB_FB = 36,
    XR_FACE_EXPRESSION_LIP_FUNNELER_RT_FB = 37,
    XR_FACE_EXPRESSION_LIP_PRESSOR_L_FB = 38,
    XR_FACE_EXPRESSION_LIP_PRESSOR_R_FB = 39,
    XR_FACE_EXPRESSION_LIP_PUCKER_L_FB = 40,
    XR_FACE_EXPRESSION_LIP_PUCKER_R_FB = 41,
    XR_FACE_EXPRESSION_LIP_STRETCHER_L_FB = 42,
    XR_FACE_EXPRESSION_LIP_STRETCHER_R_FB = 43,
    XR_FACE_EXPRESSION_LIP_SUCK_LB_FB = 44,
    XR_FACE_EXPRESSION_LIP_SUCK_LT_FB = 45,
    XR_FACE_EXPRESSION_LIP_SUCK_RB_FB = 46,
    XR_FACE_EXPRESSION_LIP_SUCK_RT_FB = 47,
    XR_FACE_EXPRESSION_LIP_TIGHTENER_L_FB = 48,
    XR_FACE_EXPRESSION_LIP_TIGHTENER_R_FB = 49,
    XR_FACE_EXPRESSION_LIPS_TOWARD_FB = 50,
    XR_FACE_EXPRESSION_LOWER_LIP_DEPRESSOR_L_FB = 51,
    XR_FACE_EXPRESSION_LOWER_LIP_DEPRESSOR_R_FB = 52,
    XR_FACE_EXPRESSION_MOUTH_LEFT_FB = 53,
    XR_FACE_EXPRESSION_MOUTH_RIGHT_FB = 54,
    XR_FACE_EXPRESSION_NOSE_WRINKLER_L_FB = 55,
    XR_FACE_EXPRESSION_NOSE_WRINKLER_R_FB = 56,
    XR_FACE_EXPRESSION_OUTER_BROW_RAISER_L_FB = 57,
    XR_FACE_EXPRESSION_OUTER_BROW_RAISER_R_FB = 58,
    XR_FACE_EXPRESSION_UPPER_LID_RAISER_L_FB = 59,
    XR_FACE_EXPRESSION_UPPER_LID_RAISER_R_FB = 60,
    XR_FACE_EXPRESSION_UPPER_LIP_RAISER_L_FB = 61,
    XR_FACE_EXPRESSION_UPPER_LIP_RAISER_R_FB = 62,
    XR_FACE_EXPRESSION_COUNT_FB = 63,
}
public enum XrFaceExpressionSetFB
{
    /// <summary> indicates that the created slink:XrFaceTrackerFB tracks the set of blend shapes described by elink:XrFaceExpressionFB enum, i.e. the flink:xrGetFaceExpressionWeightsFB function returns an array of blend shapes with the count of ename:XR_FACE_EXPRESSION_COUNT_FB and can: be indexed using elink:XrFaceExpressionFB. </summary>
    XR_FACE_EXPRESSION_SET_DEFAULT_FB = 0,
}
public enum XrFaceConfidenceFB
{
    XR_FACE_CONFIDENCE_LOWER_FACE_FB = 0,
    XR_FACE_CONFIDENCE_UPPER_FACE_FB = 1,
    XR_FACE_CONFIDENCE_COUNT_FB = 2,
}
public enum XrBodyJointFB
{
    XR_BODY_JOINT_ROOT_FB = 0,
    XR_BODY_JOINT_HIPS_FB = 1,
    XR_BODY_JOINT_SPINE_LOWER_FB = 2,
    XR_BODY_JOINT_SPINE_MIDDLE_FB = 3,
    XR_BODY_JOINT_SPINE_UPPER_FB = 4,
    XR_BODY_JOINT_CHEST_FB = 5,
    XR_BODY_JOINT_NECK_FB = 6,
    XR_BODY_JOINT_HEAD_FB = 7,
    XR_BODY_JOINT_LEFT_SHOULDER_FB = 8,
    XR_BODY_JOINT_LEFT_SCAPULA_FB = 9,
    XR_BODY_JOINT_LEFT_ARM_UPPER_FB = 10,
    XR_BODY_JOINT_LEFT_ARM_LOWER_FB = 11,
    XR_BODY_JOINT_LEFT_HAND_WRIST_TWIST_FB = 12,
    XR_BODY_JOINT_RIGHT_SHOULDER_FB = 13,
    XR_BODY_JOINT_RIGHT_SCAPULA_FB = 14,
    XR_BODY_JOINT_RIGHT_ARM_UPPER_FB = 15,
    XR_BODY_JOINT_RIGHT_ARM_LOWER_FB = 16,
    XR_BODY_JOINT_RIGHT_HAND_WRIST_TWIST_FB = 17,
    XR_BODY_JOINT_LEFT_HAND_PALM_FB = 18,
    XR_BODY_JOINT_LEFT_HAND_WRIST_FB = 19,
    XR_BODY_JOINT_LEFT_HAND_THUMB_METACARPAL_FB = 20,
    XR_BODY_JOINT_LEFT_HAND_THUMB_PROXIMAL_FB = 21,
    XR_BODY_JOINT_LEFT_HAND_THUMB_DISTAL_FB = 22,
    XR_BODY_JOINT_LEFT_HAND_THUMB_TIP_FB = 23,
    XR_BODY_JOINT_LEFT_HAND_INDEX_METACARPAL_FB = 24,
    XR_BODY_JOINT_LEFT_HAND_INDEX_PROXIMAL_FB = 25,
    XR_BODY_JOINT_LEFT_HAND_INDEX_INTERMEDIATE_FB = 26,
    XR_BODY_JOINT_LEFT_HAND_INDEX_DISTAL_FB = 27,
    XR_BODY_JOINT_LEFT_HAND_INDEX_TIP_FB = 28,
    XR_BODY_JOINT_LEFT_HAND_MIDDLE_METACARPAL_FB = 29,
    XR_BODY_JOINT_LEFT_HAND_MIDDLE_PROXIMAL_FB = 30,
    XR_BODY_JOINT_LEFT_HAND_MIDDLE_INTERMEDIATE_FB = 31,
    XR_BODY_JOINT_LEFT_HAND_MIDDLE_DISTAL_FB = 32,
    XR_BODY_JOINT_LEFT_HAND_MIDDLE_TIP_FB = 33,
    XR_BODY_JOINT_LEFT_HAND_RING_METACARPAL_FB = 34,
    XR_BODY_JOINT_LEFT_HAND_RING_PROXIMAL_FB = 35,
    XR_BODY_JOINT_LEFT_HAND_RING_INTERMEDIATE_FB = 36,
    XR_BODY_JOINT_LEFT_HAND_RING_DISTAL_FB = 37,
    XR_BODY_JOINT_LEFT_HAND_RING_TIP_FB = 38,
    XR_BODY_JOINT_LEFT_HAND_LITTLE_METACARPAL_FB = 39,
    XR_BODY_JOINT_LEFT_HAND_LITTLE_PROXIMAL_FB = 40,
    XR_BODY_JOINT_LEFT_HAND_LITTLE_INTERMEDIATE_FB = 41,
    XR_BODY_JOINT_LEFT_HAND_LITTLE_DISTAL_FB = 42,
    XR_BODY_JOINT_LEFT_HAND_LITTLE_TIP_FB = 43,
    XR_BODY_JOINT_RIGHT_HAND_PALM_FB = 44,
    XR_BODY_JOINT_RIGHT_HAND_WRIST_FB = 45,
    XR_BODY_JOINT_RIGHT_HAND_THUMB_METACARPAL_FB = 46,
    XR_BODY_JOINT_RIGHT_HAND_THUMB_PROXIMAL_FB = 47,
    XR_BODY_JOINT_RIGHT_HAND_THUMB_DISTAL_FB = 48,
    XR_BODY_JOINT_RIGHT_HAND_THUMB_TIP_FB = 49,
    XR_BODY_JOINT_RIGHT_HAND_INDEX_METACARPAL_FB = 50,
    XR_BODY_JOINT_RIGHT_HAND_INDEX_PROXIMAL_FB = 51,
    XR_BODY_JOINT_RIGHT_HAND_INDEX_INTERMEDIATE_FB = 52,
    XR_BODY_JOINT_RIGHT_HAND_INDEX_DISTAL_FB = 53,
    XR_BODY_JOINT_RIGHT_HAND_INDEX_TIP_FB = 54,
    XR_BODY_JOINT_RIGHT_HAND_MIDDLE_METACARPAL_FB = 55,
    XR_BODY_JOINT_RIGHT_HAND_MIDDLE_PROXIMAL_FB = 56,
    XR_BODY_JOINT_RIGHT_HAND_MIDDLE_INTERMEDIATE_FB = 57,
    XR_BODY_JOINT_RIGHT_HAND_MIDDLE_DISTAL_FB = 58,
    XR_BODY_JOINT_RIGHT_HAND_MIDDLE_TIP_FB = 59,
    XR_BODY_JOINT_RIGHT_HAND_RING_METACARPAL_FB = 60,
    XR_BODY_JOINT_RIGHT_HAND_RING_PROXIMAL_FB = 61,
    XR_BODY_JOINT_RIGHT_HAND_RING_INTERMEDIATE_FB = 62,
    XR_BODY_JOINT_RIGHT_HAND_RING_DISTAL_FB = 63,
    XR_BODY_JOINT_RIGHT_HAND_RING_TIP_FB = 64,
    XR_BODY_JOINT_RIGHT_HAND_LITTLE_METACARPAL_FB = 65,
    XR_BODY_JOINT_RIGHT_HAND_LITTLE_PROXIMAL_FB = 66,
    XR_BODY_JOINT_RIGHT_HAND_LITTLE_INTERMEDIATE_FB = 67,
    XR_BODY_JOINT_RIGHT_HAND_LITTLE_DISTAL_FB = 68,
    XR_BODY_JOINT_RIGHT_HAND_LITTLE_TIP_FB = 69,
    XR_BODY_JOINT_COUNT_FB = 70,
    XR_BODY_JOINT_NONE_FB = -1,
}
public enum XrBodyJointSetFB
{
    /// <summary> Indicates that the created slink:XrBodyTrackerFB tracks the set of body joints described by elink:XrBodyJointFB enum, i.e. the flink:xrLocateBodyJointsFB function returns an array of joint locations with the count of ename:XR_BODY_JOINT_COUNT_FB and can be indexed using elink:XrBodyJointFB. </summary>
    XR_BODY_JOINT_SET_DEFAULT_FB = 0,
}
public enum XrEyePositionFB
{
    /// <summary> Specifies the position of the left eye. </summary>
    XR_EYE_POSITION_LEFT_FB = 0,
    /// <summary> Specifies the position of the right eye. </summary>
    XR_EYE_POSITION_RIGHT_FB = 1,
    XR_EYE_POSITION_COUNT_FB = 2,
}
public enum XrColorSpaceFB
{
    XR_COLOR_SPACE_UNMANAGED_FB = 0,
    XR_COLOR_SPACE_REC2020_FB = 1,
    XR_COLOR_SPACE_REC709_FB = 2,
    XR_COLOR_SPACE_RIFT_CV1_FB = 3,
    XR_COLOR_SPACE_RIFT_S_FB = 4,
    XR_COLOR_SPACE_QUEST_FB = 5,
    XR_COLOR_SPACE_P3_FB = 6,
    XR_COLOR_SPACE_ADOBE_RGB_FB = 7,
}
public enum XrBlendFactorFB
{
    XR_BLEND_FACTOR_ZERO_FB = 0,
    XR_BLEND_FACTOR_ONE_FB = 1,
    XR_BLEND_FACTOR_SRC_ALPHA_FB = 2,
    XR_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA_FB = 3,
    XR_BLEND_FACTOR_DST_ALPHA_FB = 4,
    XR_BLEND_FACTOR_ONE_MINUS_DST_ALPHA_FB = 5,
}
public enum XrReprojectionModeMSFT
{
    None = 0,
    XR_REPROJECTION_MODE_DEPTH_MSFT = 1,
    XR_REPROJECTION_MODE_PLANAR_FROM_DEPTH_MSFT = 2,
    XR_REPROJECTION_MODE_PLANAR_MANUAL_MSFT = 3,
    XR_REPROJECTION_MODE_ORIENTATION_ONLY_MSFT = 4,
}
public enum XrHandForearmJointULTRALEAP
{
    XR_HAND_FOREARM_JOINT_PALM_ULTRALEAP = 0,
    XR_HAND_FOREARM_JOINT_WRIST_ULTRALEAP = 1,
    XR_HAND_FOREARM_JOINT_THUMB_METACARPAL_ULTRALEAP = 2,
    XR_HAND_FOREARM_JOINT_THUMB_PROXIMAL_ULTRALEAP = 3,
    XR_HAND_FOREARM_JOINT_THUMB_DISTAL_ULTRALEAP = 4,
    XR_HAND_FOREARM_JOINT_THUMB_TIP_ULTRALEAP = 5,
    XR_HAND_FOREARM_JOINT_INDEX_METACARPAL_ULTRALEAP = 6,
    XR_HAND_FOREARM_JOINT_INDEX_PROXIMAL_ULTRALEAP = 7,
    XR_HAND_FOREARM_JOINT_INDEX_INTERMEDIATE_ULTRALEAP = 8,
    XR_HAND_FOREARM_JOINT_INDEX_DISTAL_ULTRALEAP = 9,
    XR_HAND_FOREARM_JOINT_INDEX_TIP_ULTRALEAP = 10,
    XR_HAND_FOREARM_JOINT_MIDDLE_METACARPAL_ULTRALEAP = 11,
    XR_HAND_FOREARM_JOINT_MIDDLE_PROXIMAL_ULTRALEAP = 12,
    XR_HAND_FOREARM_JOINT_MIDDLE_INTERMEDIATE_ULTRALEAP = 13,
    XR_HAND_FOREARM_JOINT_MIDDLE_DISTAL_ULTRALEAP = 14,
    XR_HAND_FOREARM_JOINT_MIDDLE_TIP_ULTRALEAP = 15,
    XR_HAND_FOREARM_JOINT_RING_METACARPAL_ULTRALEAP = 16,
    XR_HAND_FOREARM_JOINT_RING_PROXIMAL_ULTRALEAP = 17,
    XR_HAND_FOREARM_JOINT_RING_INTERMEDIATE_ULTRALEAP = 18,
    XR_HAND_FOREARM_JOINT_RING_DISTAL_ULTRALEAP = 19,
    XR_HAND_FOREARM_JOINT_RING_TIP_ULTRALEAP = 20,
    XR_HAND_FOREARM_JOINT_LITTLE_METACARPAL_ULTRALEAP = 21,
    XR_HAND_FOREARM_JOINT_LITTLE_PROXIMAL_ULTRALEAP = 22,
    XR_HAND_FOREARM_JOINT_LITTLE_INTERMEDIATE_ULTRALEAP = 23,
    XR_HAND_FOREARM_JOINT_LITTLE_DISTAL_ULTRALEAP = 24,
    XR_HAND_FOREARM_JOINT_LITTLE_TIP_ULTRALEAP = 25,
    XR_HAND_FOREARM_JOINT_ELBOW_ULTRALEAP = 26,
}
[Flags]
public enum XrInstanceCreateFlags
{
    None = 0,
}
[Flags]
public enum XrSessionCreateFlags
{
    None = 0,
}
[Flags]
public enum XrSwapchainCreateFlags
{
    None = 0,
    /// <summary> Content will be protected from CPU access </summary>
    XR_SWAPCHAIN_CREATE_PROTECTED_CONTENT_BIT = 1,
    /// <summary> Only one image will be acquired from this swapchain over its lifetime </summary>
    XR_SWAPCHAIN_CREATE_STATIC_IMAGE_BIT = 2,
}
[Flags]
public enum XrSwapchainUsageFlags
{
    None = 0,
    /// <summary> Specifies that the image may: be a color rendering target. </summary>
    XR_SWAPCHAIN_USAGE_COLOR_ATTACHMENT_BIT = 1,
    /// <summary> Specifies that the image may: be a depth/stencil rendering target. </summary>
    XR_SWAPCHAIN_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 2,
    /// <summary> Specifies that the image may: be accessed out of order and that access may: be via atomic operations. </summary>
    XR_SWAPCHAIN_USAGE_UNORDERED_ACCESS_BIT = 4,
    /// <summary> Specifies that the image may: be used as the source of a transfer operation. </summary>
    XR_SWAPCHAIN_USAGE_TRANSFER_SRC_BIT = 8,
    /// <summary> Specifies that the image may: be used as the destination of a transfer operation. </summary>
    XR_SWAPCHAIN_USAGE_TRANSFER_DST_BIT = 16,
    /// <summary> Specifies that the image may: be sampled by a shader. </summary>
    XR_SWAPCHAIN_USAGE_SAMPLED_BIT = 32,
    /// <summary> Specifies that the image may: be reinterpreted as another image format. </summary>
    XR_SWAPCHAIN_USAGE_MUTABLE_FORMAT_BIT = 64,
    XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_MND = 128,
}
[Flags]
public enum XrViewStateFlags
{
    None = 0,
    /// <summary> Indicates validity of all slink:XrView orientations </summary>
    XR_VIEW_STATE_ORIENTATION_VALID_BIT = 1,
    /// <summary> Indicates validity of all slink:XrView positions </summary>
    XR_VIEW_STATE_POSITION_VALID_BIT = 2,
    /// <summary> Indicates whether all slink:XrView orientations are actively tracked </summary>
    XR_VIEW_STATE_ORIENTATION_TRACKED_BIT = 4,
    /// <summary> Indicates whether all slink:XrView positions are actively tracked </summary>
    XR_VIEW_STATE_POSITION_TRACKED_BIT = 8,
}
[Flags]
public enum XrCompositionLayerFlags
{
    None = 0,
    /// <summary> Enables chromatic aberration correction when not done by default. This flag has no effect on any known conformant runtime, and is planned for deprecation for OpenXR 1.1 </summary>
    XR_COMPOSITION_LAYER_CORRECT_CHROMATIC_ABERRATION_BIT = 1,
    /// <summary> Enables the layer texture alpha channel. </summary>
    XR_COMPOSITION_LAYER_BLEND_TEXTURE_SOURCE_ALPHA_BIT = 2,
    /// <summary> Indicates the texture color channels have not been premultiplied by the texture alpha channel. </summary>
    XR_COMPOSITION_LAYER_UNPREMULTIPLIED_ALPHA_BIT = 4,
}
[Flags]
public enum XrSpaceLocationFlags
{
    None = 0,
    /// <summary> Indicates that the pname:orientation member contains valid data </summary>
    XR_SPACE_LOCATION_ORIENTATION_VALID_BIT = 1,
    /// <summary> Indicates that the pname:position member contains valid data </summary>
    XR_SPACE_LOCATION_POSITION_VALID_BIT = 2,
    /// <summary> Indicates whether pname:pose member contains an actively tracked pname:orientation </summary>
    XR_SPACE_LOCATION_ORIENTATION_TRACKED_BIT = 4,
    /// <summary> Indicates whether pname:pose member contains an actively tracked pname:position </summary>
    XR_SPACE_LOCATION_POSITION_TRACKED_BIT = 8,
}
[Flags]
public enum XrSpaceVelocityFlags
{
    None = 0,
    /// <summary> Indicates that the pname:linearVelocity member contains valid data. Applications must: not read the pname:linearVelocity field if this flag is unset. </summary>
    XR_SPACE_VELOCITY_LINEAR_VALID_BIT = 1,
    /// <summary> Indicates that the pname:angularVelocity member contains valid data. Applications must: not read the pname:angularVelocity field if this flag is unset. </summary>
    XR_SPACE_VELOCITY_ANGULAR_VALID_BIT = 2,
}
[Flags]
public enum XrInputSourceLocalizedNameFlags
{
    None = 0,
    /// <summary> Asks for the part of the string which indicates the top level user path the source represents </summary>
    XR_INPUT_SOURCE_LOCALIZED_NAME_USER_PATH_BIT = 1,
    /// <summary> Asks for the part of the string which represents the interaction profile of the source </summary>
    XR_INPUT_SOURCE_LOCALIZED_NAME_INTERACTION_PROFILE_BIT = 2,
    /// <summary> Asks for the part of the string which represents the component on the device which needs to be interacted with </summary>
    XR_INPUT_SOURCE_LOCALIZED_NAME_COMPONENT_BIT = 4,
}
[Flags]
public enum XrVulkanInstanceCreateFlagsKHR
{
    None = 0,
}
[Flags]
public enum XrVulkanDeviceCreateFlagsKHR
{
    None = 0,
}
[Flags]
public enum XrDebugUtilsMessageSeverityFlagsEXT
{
    None = 0,
    /// <summary> Most verbose output severity, typically used for debugging. </summary>
    XR_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1,
    /// <summary> General info message </summary>
    XR_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16,
    /// <summary> Indicates the item may be the cause of issues. </summary>
    XR_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256,
    /// <summary> Indicates that the item is definitely related to erroneous behavior. </summary>
    XR_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096,
}
[Flags]
public enum XrDebugUtilsMessageTypeFlagsEXT
{
    None = 0,
    /// <summary> Indicates this is a general message </summary>
    XR_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1,
    /// <summary> Indicates the message is related to a validation message </summary>
    XR_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2,
    /// <summary> Indicates the message is related to a potential performance situation </summary>
    XR_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4,
    /// <summary> Indicates the message is related to a non-conformant runtime result </summary>
    XR_DEBUG_UTILS_MESSAGE_TYPE_CONFORMANCE_BIT_EXT = 8,
}
[Flags]
public enum XrOverlayMainSessionFlagsEXTX
{
    None = 0,
    /// <summary> Indicates the main session enabled `XR_KHR_composition_layer_depth` </summary>
    XR_OVERLAY_MAIN_SESSION_ENABLED_COMPOSITION_LAYER_INFO_DEPTH_BIT_EXTX = 1,
}
[Flags]
public enum XrOverlaySessionCreateFlagsEXTX
{
    None = 0,
}
public enum XrSpatialGraphNodeTypeMSFT
{
    None = 0,
    XR_SPATIAL_GRAPH_NODE_TYPE_STATIC_MSFT = 1,
    XR_SPATIAL_GRAPH_NODE_TYPE_DYNAMIC_MSFT = 2,
}
public enum XrSceneObjectTypeMSFT
{
    None = 0,
    XR_SCENE_OBJECT_TYPE_UNCATEGORIZED_MSFT = -1,
    XR_SCENE_OBJECT_TYPE_BACKGROUND_MSFT = 1,
    XR_SCENE_OBJECT_TYPE_WALL_MSFT = 2,
    XR_SCENE_OBJECT_TYPE_FLOOR_MSFT = 3,
    XR_SCENE_OBJECT_TYPE_CEILING_MSFT = 4,
    XR_SCENE_OBJECT_TYPE_PLATFORM_MSFT = 5,
    XR_SCENE_OBJECT_TYPE_INFERRED_MSFT = 6,
}
public enum XrScenePlaneAlignmentTypeMSFT
{
    XR_SCENE_PLANE_ALIGNMENT_TYPE_NON_ORTHOGONAL_MSFT = 0,
    XR_SCENE_PLANE_ALIGNMENT_TYPE_HORIZONTAL_MSFT = 1,
    XR_SCENE_PLANE_ALIGNMENT_TYPE_VERTICAL_MSFT = 2,
}
public enum XrSceneComputeStateMSFT
{
    XR_SCENE_COMPUTE_STATE_NONE_MSFT = 0,
    XR_SCENE_COMPUTE_STATE_UPDATING_MSFT = 1,
    XR_SCENE_COMPUTE_STATE_COMPLETED_MSFT = 2,
    XR_SCENE_COMPUTE_STATE_COMPLETED_WITH_ERROR_MSFT = 3,
}
public enum XrSceneComponentTypeMSFT
{
    None = 0,
    XR_SCENE_COMPONENT_TYPE_INVALID_MSFT = -1,
    XR_SCENE_COMPONENT_TYPE_OBJECT_MSFT = 1,
    XR_SCENE_COMPONENT_TYPE_PLANE_MSFT = 2,
    XR_SCENE_COMPONENT_TYPE_VISUAL_MESH_MSFT = 3,
    XR_SCENE_COMPONENT_TYPE_COLLIDER_MESH_MSFT = 4,
    XR_SCENE_COMPONENT_TYPE_SERIALIZED_SCENE_FRAGMENT_MSFT = 1000098000,
}
public enum XrSceneComputeFeatureMSFT
{
    None = 0,
    XR_SCENE_COMPUTE_FEATURE_PLANE_MSFT = 1,
    XR_SCENE_COMPUTE_FEATURE_PLANE_MESH_MSFT = 2,
    XR_SCENE_COMPUTE_FEATURE_VISUAL_MESH_MSFT = 3,
    XR_SCENE_COMPUTE_FEATURE_COLLIDER_MESH_MSFT = 4,
    XR_SCENE_COMPUTE_FEATURE_SERIALIZE_SCENE_MSFT = 1000098000,
}
public enum XrSceneComputeConsistencyMSFT
{
    None = 0,
    XR_SCENE_COMPUTE_CONSISTENCY_SNAPSHOT_COMPLETE_MSFT = 1,
    XR_SCENE_COMPUTE_CONSISTENCY_SNAPSHOT_INCOMPLETE_FAST_MSFT = 2,
    XR_SCENE_COMPUTE_CONSISTENCY_OCCLUSION_OPTIMIZED_MSFT = 3,
}
public enum XrMeshComputeLodMSFT
{
    None = 0,
    XR_MESH_COMPUTE_LOD_COARSE_MSFT = 1,
    XR_MESH_COMPUTE_LOD_MEDIUM_MSFT = 2,
    XR_MESH_COMPUTE_LOD_FINE_MSFT = 3,
    XR_MESH_COMPUTE_LOD_UNLIMITED_MSFT = 4,
}
[Flags]
public enum XrAndroidSurfaceSwapchainFlagsFB
{
    None = 0,
    /// <summary> Create the underlying BufferQueue in synchronous mode </summary>
    XR_ANDROID_SURFACE_SWAPCHAIN_SYNCHRONOUS_BIT_FB = 1,
    /// <summary> Acquire most recent buffer whose presentation timestamp is not greater than display time of final composited frame </summary>
    XR_ANDROID_SURFACE_SWAPCHAIN_USE_TIMESTAMPS_BIT_FB = 2,
}
[Flags]
public enum XrCompositionLayerImageLayoutFlagsFB
{
    None = 0,
    /// <summary> The coordinate origin of the swapchain image must be considered to be flipped vertically. </summary>
    XR_COMPOSITION_LAYER_IMAGE_LAYOUT_VERTICAL_FLIP_BIT_FB = 1,
}
[Flags]
public enum XrSwapchainCreateFoveationFlagsFB
{
    None = 0,
    /// <summary> Explicitly create the swapchain with scaled bin foveation support. The application must ensure that the swapchain is using the OpenGL graphics API and that the QCOM_texture_foveated extension is supported and enabled. </summary>
    XR_SWAPCHAIN_CREATE_FOVEATION_SCALED_BIN_BIT_FB = 1,
    /// <summary> Explicitly create the swapchain with fragment density map foveation support. The application must ensure that the swapchain is using the Vulkan graphics API and that the VK_EXT_fragment_density_map extension is supported and enabled. </summary>
    XR_SWAPCHAIN_CREATE_FOVEATION_FRAGMENT_DENSITY_MAP_BIT_FB = 2,
}
[Flags]
public enum XrSwapchainStateFoveationFlagsFB
{
    None = 0,
}
[Flags]
public enum XrFoveationEyeTrackedProfileCreateFlagsMETA
{
    None = 0,
}
[Flags]
public enum XrFoveationEyeTrackedStateFlagsMETA
{
    None = 0,
    /// <summary> Indicates whether or not foveation data is valid. This can happen if the eye tracker is obscured, the camera has dirt, or eye lid is closed, etc. </summary>
    XR_FOVEATION_EYE_TRACKED_STATE_VALID_BIT_META = 1,
}
[Flags]
public enum XrCompositionLayerSecureContentFlagsFB
{
    None = 0,
    /// <summary> Indicates the layer will only be visible inside the HMD, and not visible to external sources </summary>
    XR_COMPOSITION_LAYER_SECURE_CONTENT_EXCLUDE_LAYER_BIT_FB = 1,
    /// <summary> Indicates the layer will be displayed inside the HMD, but replaced by proxy content when written to external sources </summary>
    XR_COMPOSITION_LAYER_SECURE_CONTENT_REPLACE_LAYER_BIT_FB = 2,
}
public enum XrSpaceComponentTypeFB
{
    /// <summary> Enables tracking the 6 DOF pose of the slink:XrSpace with flink:xrLocateSpace. </summary>
    XR_SPACE_COMPONENT_TYPE_LOCATABLE_FB = 0,
    /// <summary> Enables persistence operations: save and erase. </summary>
    XR_SPACE_COMPONENT_TYPE_STORABLE_FB = 1,
    /// <summary> Enables sharing of spatial entities. </summary>
    XR_SPACE_COMPONENT_TYPE_SHARABLE_FB = 2,
    /// <summary> Bounded 2D component. </summary>
    XR_SPACE_COMPONENT_TYPE_BOUNDED_2D_FB = 3,
    /// <summary> Bounded 3D component. </summary>
    XR_SPACE_COMPONENT_TYPE_BOUNDED_3D_FB = 4,
    /// <summary> Semantic labels component. </summary>
    XR_SPACE_COMPONENT_TYPE_SEMANTIC_LABELS_FB = 5,
    /// <summary> Room layout component. </summary>
    XR_SPACE_COMPONENT_TYPE_ROOM_LAYOUT_FB = 6,
    /// <summary> Space container component. </summary>
    XR_SPACE_COMPONENT_TYPE_SPACE_CONTAINER_FB = 7,
}
public enum XrFoveationLevelFB
{
    /// <summary> No foveation </summary>
    XR_FOVEATION_LEVEL_NONE_FB = 0,
    /// <summary> Less foveation (higher periphery visual fidelity, lower performance) </summary>
    XR_FOVEATION_LEVEL_LOW_FB = 1,
    /// <summary> Medium foveation (medium periphery visual fidelity, medium performance) </summary>
    XR_FOVEATION_LEVEL_MEDIUM_FB = 2,
    /// <summary> High foveation (lower periphery visual fidelity, higher performance) </summary>
    XR_FOVEATION_LEVEL_HIGH_FB = 3,
}
public enum XrFoveationDynamicFB
{
    /// <summary> Static foveation at the maximum desired level </summary>
    XR_FOVEATION_DYNAMIC_DISABLED_FB = 0,
    /// <summary> Dynamic changing foveation based on performance headroom available up to the maximum desired level </summary>
    XR_FOVEATION_DYNAMIC_LEVEL_ENABLED_FB = 1,
}
public enum XrWindingOrderFB
{
    /// <summary> Winding order is unknown and the runtime cannot make any assumptions on the triangle orientation </summary>
    XR_WINDING_ORDER_UNKNOWN_FB = 0,
    /// <summary> Clockwise winding order </summary>
    XR_WINDING_ORDER_CW_FB = 1,
    /// <summary> Counter-clockwise winding order </summary>
    XR_WINDING_ORDER_CCW_FB = 2,
}
[Flags]
public enum XrTriangleMeshFlagsFB
{
    None = 0,
    /// <summary> The triangle mesh is mutable (can be modified after it is created). </summary>
    XR_TRIANGLE_MESH_MUTABLE_BIT_FB = 1,
}
public enum XrPassthroughLayerPurposeFB
{
    /// <summary> Reconstruction passthrough (full screen environment) </summary>
    XR_PASSTHROUGH_LAYER_PURPOSE_RECONSTRUCTION_FB = 0,
    /// <summary> Projected passthrough (using a custom surface) </summary>
    XR_PASSTHROUGH_LAYER_PURPOSE_PROJECTED_FB = 1,
    XR_PASSTHROUGH_LAYER_PURPOSE_TRACKED_KEYBOARD_HANDS_FB = 1000203001,
    XR_PASSTHROUGH_LAYER_PURPOSE_TRACKED_KEYBOARD_MASKED_HANDS_FB = 1000203002,
}
[Flags]
public enum XrPassthroughFlagsFB
{
    None = 0,
    /// <summary> The object (passthrough, layer) is running at creation. </summary>
    XR_PASSTHROUGH_IS_RUNNING_AT_CREATION_BIT_FB = 1,
    /// <summary> The passthrough system sends depth information to the compositor. Only applicable to layer objects. </summary>
    XR_PASSTHROUGH_LAYER_DEPTH_BIT_FB = 2,
}
[Flags]
public enum XrPassthroughStateChangedFlagsFB
{
    None = 0,
    /// <summary> Passthrough system requires reinitialization. </summary>
    XR_PASSTHROUGH_STATE_CHANGED_REINIT_REQUIRED_BIT_FB = 1,
    /// <summary> Non-recoverable error has occurred. A device reboot or a firmware update may be required. </summary>
    XR_PASSTHROUGH_STATE_CHANGED_NON_RECOVERABLE_ERROR_BIT_FB = 2,
    /// <summary> A recoverable error has occurred. The runtime will attempt to recover, but some functionality may be temporarily unavailable. </summary>
    XR_PASSTHROUGH_STATE_CHANGED_RECOVERABLE_ERROR_BIT_FB = 4,
    /// <summary> The runtime has recovered from a previous error and is functioning normally. </summary>
    XR_PASSTHROUGH_STATE_CHANGED_RESTORED_ERROR_BIT_FB = 8,
}
[Flags]
public enum XrPassthroughCapabilityFlagsFB
{
    None = 0,
    /// <summary> The system supports passthrough. </summary>
    XR_PASSTHROUGH_CAPABILITY_BIT_FB = 1,
    /// <summary> The system can show passthrough with realistic colors. ename:XR_PASSTHROUGH_CAPABILITY_BIT_FB must: be set if ename:XR_PASSTHROUGH_CAPABILITY_COLOR_BIT_FB is set. </summary>
    XR_PASSTHROUGH_CAPABILITY_COLOR_BIT_FB = 2,
    /// <summary> The system supports passthrough layers composited using depth testing. ename:XR_PASSTHROUGH_CAPABILITY_BIT_FB must: be set if ename:XR_PASSTHROUGH_CAPABILITY_LAYER_DEPTH_BIT_FB is set. </summary>
    XR_PASSTHROUGH_CAPABILITY_LAYER_DEPTH_BIT_FB = 4,
}
public enum XrSpaceQueryActionFB
{
    /// <summary> Tells the query to perform a load operation on any slink:XrSpace returned by the query. </summary>
    XR_SPACE_QUERY_ACTION_LOAD_FB = 0,
}
public enum XrSpaceStorageLocationFB
{
    /// <summary> Invalid storage location </summary>
    XR_SPACE_STORAGE_LOCATION_INVALID_FB = 0,
    /// <summary> Local device storage </summary>
    XR_SPACE_STORAGE_LOCATION_LOCAL_FB = 1,
    /// <summary> Cloud storage </summary>
    XR_SPACE_STORAGE_LOCATION_CLOUD_FB = 2,
}
public enum XrSpacePersistenceModeFB
{
    /// <summary> Invalid storage persistence </summary>
    XR_SPACE_PERSISTENCE_MODE_INVALID_FB = 0,
    /// <summary> Store slink:XrSpace indefinitely, or until erased </summary>
    XR_SPACE_PERSISTENCE_MODE_INDEFINITE_FB = 1,
}
[Flags]
public enum XrSemanticLabelsSupportFlagsFB
{
    None = 0,
    /// <summary> If set, and the runtime reports the pname:extensionVersion as 2 or greater, the runtime may: return multiple semantic labels separated by a comma without spaces. Otherwise, the runtime must: return a single semantic label. </summary>
    XR_SEMANTIC_LABELS_SUPPORT_MULTIPLE_SEMANTIC_LABELS_BIT_FB = 1,
    /// <summary> If set, and the runtime reports the pname:extensionVersion as 3 or greater, the runtime must: return "TABLE" instead of "DESK" as a semantic label to the application. Otherwise, the runtime must: return "DESK" instead of "TABLE" as a semantic label to the application, when applicable. </summary>
    XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_DESK_TO_TABLE_MIGRATION_BIT_FB = 2,
}
public enum XrLocalDimmingModeMETA
{
    /// <summary> Local dimming is turned off by default for the current submitted frame. This is the same as not chaining elink:XrLocalDimmingModeMETA. </summary>
    XR_LOCAL_DIMMING_MODE_OFF_META = 0,
    /// <summary> Local dimming is turned on for the current submitted frame. </summary>
    XR_LOCAL_DIMMING_MODE_ON_META = 1,
}
[Flags]
public enum XrHandTrackingAimFlagsFB
{
    None = 0,
    /// <summary> Aiming data is computed from additional sources beyond the hand data in the base structure </summary>
    XR_HAND_TRACKING_AIM_COMPUTED_BIT_FB = 1,
    /// <summary> Aiming data is valid </summary>
    XR_HAND_TRACKING_AIM_VALID_BIT_FB = 2,
    /// <summary> Index finger pinch discrete signal </summary>
    XR_HAND_TRACKING_AIM_INDEX_PINCHING_BIT_FB = 4,
    /// <summary> Middle finger pinch discrete signal </summary>
    XR_HAND_TRACKING_AIM_MIDDLE_PINCHING_BIT_FB = 8,
    /// <summary> Ring finger pinch discrete signal </summary>
    XR_HAND_TRACKING_AIM_RING_PINCHING_BIT_FB = 16,
    /// <summary> Little finger pinch discrete signal </summary>
    XR_HAND_TRACKING_AIM_LITTLE_PINCHING_BIT_FB = 32,
    /// <summary> System gesture is active </summary>
    XR_HAND_TRACKING_AIM_SYSTEM_GESTURE_BIT_FB = 64,
    /// <summary> Hand is currently marked as dominant for the system </summary>
    XR_HAND_TRACKING_AIM_DOMINANT_HAND_BIT_FB = 128,
    /// <summary> System menu gesture is active </summary>
    XR_HAND_TRACKING_AIM_MENU_PRESSED_BIT_FB = 256,
}
[Flags]
public enum XrKeyboardTrackingFlagsFB
{
    None = 0,
    /// <summary> indicates that the system has a physically tracked keyboard to report.  If not set then no other bits should be considered to be valid or meaningful.  If set either XR_KEYBOARD_TRACKING_LOCAL_BIT_FB or XR_KEYBOARD_TRACKING_REMOTE_BIT_FB must also be set. </summary>
    XR_KEYBOARD_TRACKING_EXISTS_BIT_FB = 1,
    /// <summary> indicates that the physically tracked keyboard is intended to be used in a local pairing with the system.  Mutally exclusive with XR_KEYBOARD_TRACKING_REMOTE_BIT_FB. </summary>
    XR_KEYBOARD_TRACKING_LOCAL_BIT_FB = 2,
    /// <summary> indicates that the physically tracked keyboard is intended to be used while paired to a separate remote computing device. Mutally exclusive with XR_KEYBOARD_TRACKING_LOCAL_BIT_FB. </summary>
    XR_KEYBOARD_TRACKING_REMOTE_BIT_FB = 4,
    /// <summary> indicates that the physically tracked keyboard is actively connected to the headset and capable of sending key data </summary>
    XR_KEYBOARD_TRACKING_CONNECTED_BIT_FB = 8,
}
[Flags]
public enum XrKeyboardTrackingQueryFlagsFB
{
    None = 0,
    /// <summary> indicates the query is for the physically tracked keyboard that is intended to be used in a local pairing with the System. Mutally exclusive with XR_KEYBOARD_TRACKING_QUERY_REMOTE_BIT_FB. </summary>
    XR_KEYBOARD_TRACKING_QUERY_LOCAL_BIT_FB = 2,
    /// <summary> indicates the query is for the physically tracked keyboard that may be connected to a separate remote computing device. Mutally exclusive with XR_KEYBOARD_TRACKING_QUERY_LOCAL_BIT_FB. </summary>
    XR_KEYBOARD_TRACKING_QUERY_REMOTE_BIT_FB = 4,
}
[Flags]
public enum XrCompositionLayerSpaceWarpInfoFlagsFB
{
    None = 0,
    /// <summary> Skip current frame's space warp extrapolation </summary>
    XR_COMPOSITION_LAYER_SPACE_WARP_INFO_FRAME_SKIP_BIT_FB = 1,
}
[Flags]
public enum XrRenderModelFlagsFB
{
    None = 0,
    /// <summary> Minimal level of support.  Can only contain a single mesh.  Can only contain a single texture.  Can not contain transparency.  Assumes unlit rendering.  Requires Extension KHR_texturebasisu. </summary>
    XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_1_BIT_FB = 1,
    /// <summary> All of XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_1_BIT_FB support plus: Multiple meshes. Multiple Textures. Texture Transparency. </summary>
    XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_2_BIT_FB = 2,
}
public enum XrFacialTrackingTypeHTC
{
    None = 0,
    /// <summary> Specifies this handle will observe eye expressions, with values indexed by elink:XrEyeExpressionHTC whose count is dlink:XR_FACIAL_EXPRESSION_EYE_COUNT_HTC. </summary>
    XR_FACIAL_TRACKING_TYPE_EYE_DEFAULT_HTC = 1,
    /// <summary> Specifies this handle will observe lip expressions, with values indexed by elink:XrLipExpressionHTC whose count is dlink:XR_FACIAL_EXPRESSION_LIP_COUNT_HTC. </summary>
    XR_FACIAL_TRACKING_TYPE_LIP_DEFAULT_HTC = 2,
}
public enum XrPassthroughFormHTC
{
    /// <summary> Presents the passthrough with full of the entire screen. </summary>
    XR_PASSTHROUGH_FORM_PLANAR_HTC = 0,
    /// <summary> Presents the passthrough projecting onto a custom mesh. </summary>
    XR_PASSTHROUGH_FORM_PROJECTED_HTC = 1,
}
public enum XrEyeExpressionHTC
{
    XR_EYE_EXPRESSION_LEFT_BLINK_HTC = 0,
    XR_EYE_EXPRESSION_LEFT_WIDE_HTC = 1,
    XR_EYE_EXPRESSION_RIGHT_BLINK_HTC = 2,
    XR_EYE_EXPRESSION_RIGHT_WIDE_HTC = 3,
    XR_EYE_EXPRESSION_LEFT_SQUEEZE_HTC = 4,
    XR_EYE_EXPRESSION_RIGHT_SQUEEZE_HTC = 5,
    XR_EYE_EXPRESSION_LEFT_DOWN_HTC = 6,
    XR_EYE_EXPRESSION_RIGHT_DOWN_HTC = 7,
    XR_EYE_EXPRESSION_LEFT_OUT_HTC = 8,
    XR_EYE_EXPRESSION_RIGHT_IN_HTC = 9,
    XR_EYE_EXPRESSION_LEFT_IN_HTC = 10,
    XR_EYE_EXPRESSION_RIGHT_OUT_HTC = 11,
    XR_EYE_EXPRESSION_LEFT_UP_HTC = 12,
    XR_EYE_EXPRESSION_RIGHT_UP_HTC = 13,
}
public enum XrLipExpressionHTC
{
    XR_LIP_EXPRESSION_JAW_RIGHT_HTC = 0,
    XR_LIP_EXPRESSION_JAW_LEFT_HTC = 1,
    XR_LIP_EXPRESSION_JAW_FORWARD_HTC = 2,
    XR_LIP_EXPRESSION_JAW_OPEN_HTC = 3,
    XR_LIP_EXPRESSION_MOUTH_APE_SHAPE_HTC = 4,
    XR_LIP_EXPRESSION_MOUTH_UPPER_RIGHT_HTC = 5,
    XR_LIP_EXPRESSION_MOUTH_UPPER_LEFT_HTC = 6,
    XR_LIP_EXPRESSION_MOUTH_LOWER_RIGHT_HTC = 7,
    XR_LIP_EXPRESSION_MOUTH_LOWER_LEFT_HTC = 8,
    XR_LIP_EXPRESSION_MOUTH_UPPER_OVERTURN_HTC = 9,
    XR_LIP_EXPRESSION_MOUTH_LOWER_OVERTURN_HTC = 10,
    XR_LIP_EXPRESSION_MOUTH_POUT_HTC = 11,
    XR_LIP_EXPRESSION_MOUTH_SMILE_RIGHT_HTC = 12,
    XR_LIP_EXPRESSION_MOUTH_SMILE_LEFT_HTC = 13,
    XR_LIP_EXPRESSION_MOUTH_SAD_RIGHT_HTC = 14,
    XR_LIP_EXPRESSION_MOUTH_SAD_LEFT_HTC = 15,
    XR_LIP_EXPRESSION_CHEEK_PUFF_RIGHT_HTC = 16,
    XR_LIP_EXPRESSION_CHEEK_PUFF_LEFT_HTC = 17,
    XR_LIP_EXPRESSION_CHEEK_SUCK_HTC = 18,
    XR_LIP_EXPRESSION_MOUTH_UPPER_UPRIGHT_HTC = 19,
    XR_LIP_EXPRESSION_MOUTH_UPPER_UPLEFT_HTC = 20,
    XR_LIP_EXPRESSION_MOUTH_LOWER_DOWNRIGHT_HTC = 21,
    XR_LIP_EXPRESSION_MOUTH_LOWER_DOWNLEFT_HTC = 22,
    XR_LIP_EXPRESSION_MOUTH_UPPER_INSIDE_HTC = 23,
    XR_LIP_EXPRESSION_MOUTH_LOWER_INSIDE_HTC = 24,
    XR_LIP_EXPRESSION_MOUTH_LOWER_OVERLAY_HTC = 25,
    XR_LIP_EXPRESSION_TONGUE_LONGSTEP1_HTC = 26,
    XR_LIP_EXPRESSION_TONGUE_LEFT_HTC = 27,
    XR_LIP_EXPRESSION_TONGUE_RIGHT_HTC = 28,
    XR_LIP_EXPRESSION_TONGUE_UP_HTC = 29,
    XR_LIP_EXPRESSION_TONGUE_DOWN_HTC = 30,
    XR_LIP_EXPRESSION_TONGUE_ROLL_HTC = 31,
    XR_LIP_EXPRESSION_TONGUE_LONGSTEP2_HTC = 32,
    XR_LIP_EXPRESSION_TONGUE_UPRIGHT_MORPH_HTC = 33,
    XR_LIP_EXPRESSION_TONGUE_UPLEFT_MORPH_HTC = 34,
    XR_LIP_EXPRESSION_TONGUE_DOWNRIGHT_MORPH_HTC = 35,
    XR_LIP_EXPRESSION_TONGUE_DOWNLEFT_MORPH_HTC = 36,
}
[Flags]
public enum XrDigitalLensControlFlagsALMALENCE
{
    None = 0,
    /// <summary> disables Digital Lens processing of render textures </summary>
    XR_DIGITAL_LENS_CONTROL_PROCESSING_DISABLE_BIT_ALMALENCE = 1,
}
[Flags]
public enum XrCompositionLayerSettingsFlagsFB
{
    None = 0,
    /// <summary> Indicates compositor may: use layer texture supersampling. </summary>
    XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SUPER_SAMPLING_BIT_FB = 1,
    /// <summary> Indicates compositor may: use high quality layer texture supersampling. </summary>
    XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SUPER_SAMPLING_BIT_FB = 2,
    /// <summary> Indicates compositor may: use layer texture sharpening. </summary>
    XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SHARPENING_BIT_FB = 4,
    /// <summary> Indicates compositor may: use high quality layer texture sharpening. </summary>
    XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SHARPENING_BIT_FB = 8,
}
[Flags]
public enum XrExternalCameraStatusFlagsOCULUS
{
    None = 0,
    /// <summary> External camera is connected </summary>
    XR_EXTERNAL_CAMERA_STATUS_CONNECTED_BIT_OCULUS = 1,
    /// <summary> External camera is undergoing calibration </summary>
    XR_EXTERNAL_CAMERA_STATUS_CALIBRATING_BIT_OCULUS = 2,
    /// <summary> External camera has tried and failed calibration </summary>
    XR_EXTERNAL_CAMERA_STATUS_CALIBRATION_FAILED_BIT_OCULUS = 4,
    /// <summary> External camera has tried and passed calibration </summary>
    XR_EXTERNAL_CAMERA_STATUS_CALIBRATED_BIT_OCULUS = 8,
    /// <summary> External camera is capturing </summary>
    XR_EXTERNAL_CAMERA_STATUS_CAPTURING_BIT_OCULUS = 16,
}
public enum XrExternalCameraAttachedToDeviceOCULUS
{
    /// <summary> External camera is at a fixed point in LOCAL space </summary>
    XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_NONE_OCULUS = 0,
    /// <summary> External camera is attached to the HMD </summary>
    XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_HMD_OCULUS = 1,
    /// <summary> External camera is attached to a left Touch controller </summary>
    XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_LTOUCH_OCULUS = 2,
    /// <summary> External camera is attached to a right Touch controller </summary>
    XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_RTOUCH_OCULUS = 3,
}
public enum XrPassthroughColorLutChannelsMETA
{
    None = 0,
    XR_PASSTHROUGH_COLOR_LUT_CHANNELS_RGB_META = 1,
    XR_PASSTHROUGH_COLOR_LUT_CHANNELS_RGBA_META = 2,
}
[Flags]
public enum XrPerformanceMetricsCounterFlagsMETA
{
    None = 0,
    /// <summary> Indicates any of the values in XrPerformanceMetricsCounterMETA is valid. </summary>
    XR_PERFORMANCE_METRICS_COUNTER_ANY_VALUE_VALID_BIT_META = 1,
    /// <summary> Indicates the uintValue in XrPerformanceMetricsCounterMETA is valid. </summary>
    XR_PERFORMANCE_METRICS_COUNTER_UINT_VALUE_VALID_BIT_META = 2,
    /// <summary> Indicates the floatValue in XrPerformanceMetricsCounterMETA is valid. </summary>
    XR_PERFORMANCE_METRICS_COUNTER_FLOAT_VALUE_VALID_BIT_META = 4,
}
public enum XrPerformanceMetricsCounterUnitMETA
{
    /// <summary> the performance counter unit is generic (unspecified). </summary>
    XR_PERFORMANCE_METRICS_COUNTER_UNIT_GENERIC_META = 0,
    /// <summary> the performance counter unit is percentage (%). </summary>
    XR_PERFORMANCE_METRICS_COUNTER_UNIT_PERCENTAGE_META = 1,
    /// <summary> the performance counter unit is millisecond. </summary>
    XR_PERFORMANCE_METRICS_COUNTER_UNIT_MILLISECONDS_META = 2,
    /// <summary> the performance counter unit is byte. </summary>
    XR_PERFORMANCE_METRICS_COUNTER_UNIT_BYTES_META = 3,
    /// <summary> the performance counter unit is hertz (Hz). </summary>
    XR_PERFORMANCE_METRICS_COUNTER_UNIT_HERTZ_META = 4,
}
[Flags]
public enum XrPassthroughPreferenceFlagsMETA
{
    None = 0,
    /// <summary> Indicates that the runtime recommends apps to default to a mixed reality experience with passthrough (if supported). </summary>
    XR_PASSTHROUGH_PREFERENCE_DEFAULT_TO_ACTIVE_BIT_META = 1,
}
public enum XrFoveationModeHTC
{
    /// <summary> No foveation </summary>
    XR_FOVEATION_MODE_DISABLE_HTC = 0,
    /// <summary> Apply system default setting with fixed clear FOV and periphery quality. </summary>
    XR_FOVEATION_MODE_FIXED_HTC = 1,
    /// <summary> Allow system to set foveation dynamically according realtime system metric or other extensions. </summary>
    XR_FOVEATION_MODE_DYNAMIC_HTC = 2,
    /// <summary> Allow application to set foveation with desired clear FOV, periphery quality, and focal center offset. </summary>
    XR_FOVEATION_MODE_CUSTOM_HTC = 3,
}
[Flags]
public enum XrFoveationDynamicFlagsHTC
{
    None = 0,
    /// <summary> Allow system to set periphery pixel density dynamically. </summary>
    XR_FOVEATION_DYNAMIC_LEVEL_ENABLED_BIT_HTC = 1,
    /// <summary> Allow system to set clear FOV degree dynamically. </summary>
    XR_FOVEATION_DYNAMIC_CLEAR_FOV_ENABLED_BIT_HTC = 2,
    /// <summary> Allow system to set focal center offset dynamically. </summary>
    XR_FOVEATION_DYNAMIC_FOCAL_CENTER_OFFSET_ENABLED_BIT_HTC = 4,
}
public enum XrFoveationLevelHTC
{
    /// <summary> No foveation </summary>
    XR_FOVEATION_LEVEL_NONE_HTC = 0,
    /// <summary> Light periphery pixel density drop and lower performance gain. </summary>
    XR_FOVEATION_LEVEL_LOW_HTC = 1,
    /// <summary> Medium periphery pixel density drop and medium performance gain </summary>
    XR_FOVEATION_LEVEL_MEDIUM_HTC = 2,
    /// <summary> Heavy periphery pixel density drop and higher performance gain </summary>
    XR_FOVEATION_LEVEL_HIGH_HTC = 3,
}
public enum XrCompareOpFB
{
    /// <summary> Comparison is never true. </summary>
    XR_COMPARE_OP_NEVER_FB = 0,
    /// <summary> Comparison is true if source less than is destination. </summary>
    XR_COMPARE_OP_LESS_FB = 1,
    /// <summary> Comparison is true if source is equal to destination. </summary>
    XR_COMPARE_OP_EQUAL_FB = 2,
    /// <summary> Comparison is true if source is less than or equal to destination. </summary>
    XR_COMPARE_OP_LESS_OR_EQUAL_FB = 3,
    /// <summary> Comparison is true if source is greater than destination. </summary>
    XR_COMPARE_OP_GREATER_FB = 4,
    /// <summary> Comparison is true if source is not equal to destination. </summary>
    XR_COMPARE_OP_NOT_EQUAL_FB = 5,
    /// <summary> Comparison is true if source is greater than or equal to destination. </summary>
    XR_COMPARE_OP_GREATER_OR_EQUAL_FB = 6,
    /// <summary> Comparison is always true. </summary>
    XR_COMPARE_OP_ALWAYS_FB = 7,
}
[Flags]
public enum XrFrameEndInfoFlagsML
{
    None = 0,
    /// <summary> Indicates that the content for this frame is protected and should not be recorded or captured outside the graphics system. </summary>
    XR_FRAME_END_INFO_PROTECTED_BIT_ML = 1,
    /// <summary> Indicates that a soft fade to transparent should be added to the frame in the compositor to blend any hard edges at the FOV limits. </summary>
    XR_FRAME_END_INFO_VIGNETTE_BIT_ML = 2,
}
[Flags]
public enum XrGlobalDimmerFrameEndInfoFlagsML
{
    None = 0,
    /// <summary> Indicates that the global dimmer should: be enabled and controlled by slink:XrGlobalDimmerFrameEndInfoML::pname:dimmerValue. </summary>
    XR_GLOBAL_DIMMER_FRAME_END_INFO_ENABLED_BIT_ML = 1,
}
public enum XrTrackingOptimizationSettingsHintQCOM
{
    /// <summary> Used by the application to indicate that it does not have a preference to optimize for. The run-time is understood to choose a balanced approach. </summary>
    XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_NONE_QCOM = 0,
    /// <summary> Used by the application to indicate that it prefers tracking to be optimized for long range, possibly at the expense of competing interests. </summary>
    XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_LONG_RANGE_PRIORIZATION_QCOM = 1,
    /// <summary> Used by the application to indicate that it prefers tracking to be optimized for close range, possibly at the expense of competing interests. </summary>
    XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_CLOSE_RANGE_PRIORIZATION_QCOM = 2,
    /// <summary> Used by the application to indicate that it prefers tracking to be optimized for low power consumption, possibly at the expense of competing interests. </summary>
    XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_LOW_POWER_PRIORIZATION_QCOM = 3,
    /// <summary> Used by the application to indicate that it prefers tracking to be optimized for increased tracking performance, possibly at the cost of increased power consumption. </summary>
    XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_HIGH_POWER_PRIORIZATION_QCOM = 4,
}
public enum XrTrackingOptimizationSettingsDomainQCOM
{
    None = 0,
    /// <summary> Setting applies to all QCOM tracking extensions. </summary>
    XR_TRACKING_OPTIMIZATION_SETTINGS_DOMAIN_ALL_QCOM = 1,
}
public enum XrForceFeedbackCurlLocationMNDX
{
    /// <summary> force feedback for thumb curl </summary>
    XR_FORCE_FEEDBACK_CURL_LOCATION_THUMB_CURL_MNDX = 0,
    /// <summary> force feedback for index finger curl </summary>
    XR_FORCE_FEEDBACK_CURL_LOCATION_INDEX_CURL_MNDX = 1,
    /// <summary> force feedback for middle finger curl </summary>
    XR_FORCE_FEEDBACK_CURL_LOCATION_MIDDLE_CURL_MNDX = 2,
    /// <summary> force feedback for ring finger curl </summary>
    XR_FORCE_FEEDBACK_CURL_LOCATION_RING_CURL_MNDX = 3,
    /// <summary> force feedback for little finger curl </summary>
    XR_FORCE_FEEDBACK_CURL_LOCATION_LITTLE_CURL_MNDX = 4,
}
[Flags]
public enum XrPlaneDetectorFlagsEXT
{
    None = 0,
    /// <summary> populate the plane contour information </summary>
    XR_PLANE_DETECTOR_ENABLE_CONTOUR_BIT_EXT = 1,
}
[Flags]
public enum XrPlaneDetectionCapabilityFlagsEXT
{
    None = 0,
    /// <summary> plane detection is supported </summary>
    XR_PLANE_DETECTION_CAPABILITY_PLANE_DETECTION_BIT_EXT = 1,
    /// <summary> polygon buffers for holes in planes can be generated </summary>
    XR_PLANE_DETECTION_CAPABILITY_PLANE_HOLES_BIT_EXT = 2,
    /// <summary> plane detection supports ceiling semantic classification </summary>
    XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_CEILING_BIT_EXT = 4,
    /// <summary> plane detection supports floor semantic classification </summary>
    XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_FLOOR_BIT_EXT = 8,
    /// <summary> plane detection supports wall semantic classification </summary>
    XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_WALL_BIT_EXT = 16,
    /// <summary> plane detection supports platform semantic classification (for example table tops) </summary>
    XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_PLATFORM_BIT_EXT = 32,
    /// <summary> plane detection supports plane orientation classification. If not supported planes are always classified as ARBITRARY. </summary>
    XR_PLANE_DETECTION_CAPABILITY_ORIENTATION_BIT_EXT = 64,
}
public enum XrPlaneDetectionStateEXT
{
    XR_PLANE_DETECTION_STATE_NONE_EXT = 0,
    XR_PLANE_DETECTION_STATE_PENDING_EXT = 1,
    XR_PLANE_DETECTION_STATE_DONE_EXT = 2,
    XR_PLANE_DETECTION_STATE_ERROR_EXT = 3,
    XR_PLANE_DETECTION_STATE_FATAL_EXT = 4,
}
public enum XrPlaneDetectorOrientationEXT
{
    /// <summary> The detected plane is horizontal and faces upward (e.g. floor). </summary>
    XR_PLANE_DETECTOR_ORIENTATION_HORIZONTAL_UPWARD_EXT = 0,
    /// <summary> The detected plane is horizontal and faces downward (e.g. ceiling). </summary>
    XR_PLANE_DETECTOR_ORIENTATION_HORIZONTAL_DOWNWARD_EXT = 1,
    /// <summary> The detected plane is vertical (e.g. wall). </summary>
    XR_PLANE_DETECTOR_ORIENTATION_VERTICAL_EXT = 2,
    /// <summary> The detected plane has an arbitrary, non-vertical and non-horizontal orientation. </summary>
    XR_PLANE_DETECTOR_ORIENTATION_ARBITRARY_EXT = 3,
}
public enum XrPlaneDetectorSemanticTypeEXT
{
    /// <summary> The runtime was unable to classify this plane. </summary>
    XR_PLANE_DETECTOR_SEMANTIC_TYPE_UNDEFINED_EXT = 0,
    /// <summary> The detected plane is a ceiling. </summary>
    XR_PLANE_DETECTOR_SEMANTIC_TYPE_CEILING_EXT = 1,
    /// <summary> The detected plane is a floor. </summary>
    XR_PLANE_DETECTOR_SEMANTIC_TYPE_FLOOR_EXT = 2,
    /// <summary> The detected plane is a wall. </summary>
    XR_PLANE_DETECTOR_SEMANTIC_TYPE_WALL_EXT = 3,
    /// <summary> The detected plane is a platform, like a table. </summary>
    XR_PLANE_DETECTOR_SEMANTIC_TYPE_PLATFORM_EXT = 4,
}
public enum XrVirtualKeyboardLocationTypeMETA
{
    /// <summary> Indicates that the application will provide the position and scale of the keyboard. </summary>
    XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_CUSTOM_META = 0,
    /// <summary> Indicates that the runtime will set the position and scale for far field keyboard. </summary>
    XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_FAR_META = 1,
    /// <summary> Indicates that the runtime will set the position and scale for direct interaction keyboard. </summary>
    XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_DIRECT_META = 2,
}
public enum XrVirtualKeyboardInputSourceMETA
{
    None = 0,
    /// <summary> Left controller ray. </summary>
    XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_RAY_LEFT_META = 1,
    /// <summary> Right controller ray. </summary>
    XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_RAY_RIGHT_META = 2,
    /// <summary> Left hand ray. </summary>
    XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_RAY_LEFT_META = 3,
    /// <summary> Right hand ray. </summary>
    XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_RAY_RIGHT_META = 4,
    /// <summary> Left controller direct touch. </summary>
    XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_DIRECT_LEFT_META = 5,
    /// <summary> Right controller direct touch. </summary>
    XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_DIRECT_RIGHT_META = 6,
    /// <summary> Left hand direct touch. </summary>
    XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_DIRECT_INDEX_TIP_LEFT_META = 7,
    /// <summary> Right hand direct touch. </summary>
    XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_DIRECT_INDEX_TIP_RIGHT_META = 8,
}
[Flags]
public enum XrVirtualKeyboardInputStateFlagsMETA
{
    None = 0,
    /// <summary> If the input source is considered 'pressed' at all. Pinch for hands, Primary button for controllers. </summary>
    XR_VIRTUAL_KEYBOARD_INPUT_STATE_PRESSED_BIT_META = 1,
}